version: 2.1

executors:
  python:
    docker:
      - image: cimg/python:3.12
  python-browsers:
    docker:
      - image: cimg/python:3.12-browsers

commands:
  install-uv:
    description: Install uv and set PATH
    steps:
      - run:
          name: Install uv
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$BASH_ENV"
            source "$BASH_ENV"
      - run:
          name: Show uv version
          command: uv --version
  restore-uv-cache:
    description: Restore uv caches
    steps:
      - restore_cache:
          name: Restore uv cache
          keys:
            - v1-uv-{{ checksum "uv.lock" }}
            - v1-uv-
  save-uv-cache:
    description: Save uv caches
    steps:
      - save_cache:
          name: Save uv cache
          key: v1-uv-{{ checksum "uv.lock" }}
          paths:
            - ~/.cache/uv
            - .venv

jobs:
  ruff:
    executor: python
    steps:
      - checkout
      - install-uv
      - run:
          name: Ruff check
          command: |
            uvx ruff --version
            uvx ruff check .

  unit-tests:
    executor: python
    environment:
      PYTEST_ADDOPTS: -q
    steps:
      - checkout
      - install-uv
      - restore-uv-cache
      - run:
          name: Install dependencies (unit)
          command: uv sync --group unit
      - save-uv-cache
      - run:
          name: Run unit tests
          command: |
            mkdir -p test-results
            uv run pytest tests/unit --junitxml=test-results/junit.xml --cov=src --cov-report=xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage.xml
      - store_test_results:
          path: test-results
      - run:
          name: Install Deepsource CLI
          command: curl https://deepsource.io/cli | sh
      - run:
          name: Send coverage report to Deepsource
          command: ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.xml
          when: on_success
          environment:
            DEEPSOURCE_DSN: "${DEEPSOURCE_DSN}"

  functional-tests:
  executor: python-browsers
    environment:
      # Retries are handled by pytest flag like in GHA
      PYTEST_ADDOPTS: -q
    steps:
      - checkout
      - install-uv
      - restore-uv-cache
      - run:
          name: Install dependencies (unit + functional)
          command: |
            uv sync --group unit --group func
            # Install browsers and OS deps for Playwright
            uv run playwright install
            uv run playwright install-deps || true
      - save-uv-cache
      - run:
          name: Run functional tests (with retries)
          command: uv run pytest tests/functional -x --retries 3
          environment:
            KAMIHI_TESTING__BOT_TOKEN: "${KAMIHI_TESTING__BOT_TOKEN}"
            KAMIHI_TESTING__BOT_USERNAME: "${KAMIHI_TESTING__BOT_USERNAME}"
            KAMIHI_TESTING__USER_ID: "${KAMIHI_TESTING__USER_ID}"
            KAMIHI_TESTING__TG_PHONE_NUMBER: "${KAMIHI_TESTING__TG_PHONE_NUMBER}"
            KAMIHI_TESTING__TG_API_ID: "${KAMIHI_TESTING__TG_API_ID}"
            KAMIHI_TESTING__TG_API_HASH: "${KAMIHI_TESTING__TG_API_HASH}"
            KAMIHI_TESTING__TG_SESSION: "${KAMIHI_TESTING__TG_SESSION}"
            KAMIHI_TESTING__TG_DC_ID: "${KAMIHI_TESTING__TG_DC_ID}"
            KAMIHI_TESTING__TG_DC_IP: "${KAMIHI_TESTING__TG_DC_IP}"

  bump-version:
    executor: python
    steps:
      - checkout
      - run:
          name: Configure Git credentials
          command: |
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            # Use token for pushing tags/commits
            if [ -n "${GITHUB_TOKEN}" ]; then
              git remote set-url origin "https://${GITHUB_TOKEN}:x-oauth-basic@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
            fi
            git fetch --all --tags --prune
      - install-uv
      - run:
          name: Bump version with Commitizen
          command: |
            # Skip if last commit starts with 'bump'
            if git log -1 --pretty=%B | grep -E "^bump|^bump:" -q; then
              echo "Skip bump due to commit message"
              mkdir -p workspace
              echo "SKIP" > workspace/revision.txt
              printf "No changes" > workspace/body.md
              exit 0
            fi
            # Perform bump and changelog update
            uvx cz bump --yes --changelog
            # derive revision from pyproject
            REVISION=$(python -c "import tomllib;print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
            echo "Revision: ${REVISION}"
            # Create incremental changelog body (best-effort)
            uvx cz changelog --incremental --file-name body.md || true
            # push changes and tags
            git push --follow-tags origin "$CIRCLE_BRANCH"
            mkdir -p workspace
            echo "$REVISION" > workspace/revision.txt
            mv body.md workspace/body.md || printf "" > workspace/body.md
      - persist_to_workspace:
          root: workspace
          paths:
            - revision.txt
            - body.md

  build:
    executor: python
    steps:
      - checkout
      - install-uv
      - restore-uv-cache
      - run:
          name: Build project
          command: |
            uv sync --dev
            uv build
      - save-uv-cache
      - store_artifacts:
          path: dist
          destination: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  publish:
    executor: python
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Publish to PyPI
          command: |
            ls -la /tmp/workspace/dist
            # Use twine via uvx. Requires PYPI_API_TOKEN to be set in CircleCI project.
            uvx twine upload /tmp/workspace/dist/* --non-interactive --skip-existing -u __token__ -p "$PYPI_API_TOKEN"
          environment:
            PYPI_API_TOKEN: "${PYPI_API_TOKEN}"

  create-release:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install GitHub CLI
          command: |
            type -p gh >/dev/null || {
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              sudo apt-get update -y && sudo apt-get install -y gh
            }
      - run:
          name: Create GitHub release
          command: |
            REVISION=$(cat /tmp/workspace/revision.txt)
            if [ "$REVISION" = "SKIP" ] || [ -z "$REVISION" ]; then
              echo "No revision produced; skipping release creation."
              exit 0
            fi
            BODY_FILE=/tmp/workspace/body.md
            # Create release and attach wheel
            gh release create "$REVISION" /tmp/workspace/dist/kamihi-${REVISION}-py3-none-any.whl \
              --notes-file "$BODY_FILE" \
              --title "$REVISION" \
              --repo "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" || true
          environment:
            GITHUB_TOKEN: "${GITHUB_TOKEN}"

  docs:
    executor: python
    steps:
      - checkout
      - install-uv
    - attach_workspace:
      at: /tmp/workspace
      - run:
          name: Configure Git credentials
          command: |
            git config user.name github-actions[bot]
            git config user.email 41898282+github-actions[bot]@users.noreply.github.com
            if [ -n "${GITHUB_TOKEN}" ]; then
              git remote set-url origin "https://${GITHUB_TOKEN}:x-oauth-basic@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
            fi
      - run:
          name: Install docs dependencies
          command: uv sync --group docs
      - run:
          name: Build and deploy docs (mike)
          command: |
            REVISION=$(cat /tmp/workspace/revision.txt 2>/dev/null || true)
            if [ -z "$REVISION" ] || [ "$REVISION" = "SKIP" ]; then
              echo "Docs deploy skipped (no revision from bump)."
              exit 0
            fi
            uv run mike deploy --push --update-aliases "$REVISION" latest
            uv run mike set-default --push latest
          environment:
            GITHUB_TOKEN: "${GITHUB_TOKEN}"

workflows:
  checks:
    jobs:
      - ruff
      - unit-tests
      - functional-tests

  release:
    jobs:
      - bump-version:
          filters:
            branches:
              only: main
      - build:
          requires:
            - bump-version
          filters:
            branches:
              only: main
      - publish:
          requires:
            - build
          filters:
            branches:
              only: main
      - create-release:
          requires:
            - bump-version
            - build
          filters:
            branches:
              only: main
      - docs:
          requires:
            - bump-version
          filters:
            branches:
              only: main