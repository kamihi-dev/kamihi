{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"Kamihi  <p> Python framework for rapid Telegram bot development and management </p> <p> </p> <p>This project is currently in the early stages of development. Expect frequent changes and updates as we work towards a stable release. Your feedback and contributions are welcome!</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#080-2025-05-20","title":"0.8.0 (2025-05-20)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>bot: user can now be requested in action function parameters (#48)</li> </ul>"},{"location":"changelog/#071-2025-05-18","title":"0.7.1 (2025-05-18)","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>tg: auth handler now calls check update of wrapped handler (#44)</li> </ul>"},{"location":"changelog/#070-2025-05-13","title":"0.7.0 (2025-05-13)","text":""},{"location":"changelog/#feat_1","title":"Feat","text":"<ul> <li>users: initial user functionality (#39)</li> </ul>"},{"location":"changelog/#060-2025-05-05","title":"0.6.0 (2025-05-05)","text":""},{"location":"changelog/#feat_2","title":"Feat","text":"<ul> <li>web: initial implementation (#36)</li> </ul>"},{"location":"changelog/#053-2025-05-02","title":"0.5.3 (2025-05-02)","text":""},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>tg: markdown escaping (#34)</li> </ul>"},{"location":"changelog/#052-2025-05-01","title":"0.5.2 (2025-05-01)","text":""},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>checking out latest ref instead of action ref</li> </ul>"},{"location":"changelog/#051-2025-05-01","title":"0.5.1 (2025-05-01)","text":""},{"location":"changelog/#fix_3","title":"Fix","text":"<ul> <li>added metadata to pyproject.toml</li> </ul>"},{"location":"changelog/#050-2025-05-01","title":"0.5.0 (2025-05-01)","text":""},{"location":"changelog/#feat_3","title":"Feat","text":"<ul> <li>bot: added (#27)</li> </ul>"},{"location":"changelog/#040-2025-04-17","title":"0.4.0 (2025-04-17)","text":""},{"location":"changelog/#feat_4","title":"Feat","text":"<ul> <li>tg: added (#19)</li> </ul>"},{"location":"changelog/#030-2025-04-01","title":"0.3.0 (2025-04-01)","text":""},{"location":"changelog/#feat_5","title":"Feat","text":"<ul> <li>templates: added (#14)</li> </ul>"},{"location":"changelog/#020-2025-03-28","title":"0.2.0 (2025-03-28)","text":""},{"location":"changelog/#feat_6","title":"Feat","text":"<ul> <li>base: added (#5)</li> </ul>"},{"location":"changelog/#011-2025-03-19","title":"0.1.1 (2025-03-19)","text":""},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>using new file header</li> </ul>"},{"location":"changelog/#010-2025-03-18","title":"0.1.0 (2025-03-18)","text":""},{"location":"changelog/#feat_7","title":"Feat","text":"<ul> <li>added pre-commit and ruff</li> <li>initial project setup</li> </ul>"},{"location":"changelog/#fix_4","title":"Fix","text":"<ul> <li>delete boilerplate code</li> </ul>"},{"location":"thanks/","title":"Special thanks","text":"<p>Special thanks to the following projects and people for their contributions to the development of this project:</p> <ul> <li>Python Telegram Bot</li> </ul>"},{"location":"dev/","title":"Index","text":"<p>TODO</p>"},{"location":"dev/architecture/","title":"Architecture","text":"<p>TODO</p>"},{"location":"dev/directories/","title":"Directories","text":"<p>TODO</p>"},{"location":"dev/setup/","title":"Development setup","text":"<p>TODO</p>"},{"location":"dev/testing/","title":"Testing","text":""},{"location":"dev/testing/#unit-testing","title":"Unit testing","text":"<p>Unit tests are located in the <code>tests/unit</code> directory. They are organized in the same way as the source code, with a folder per module, each with one or more test files that normally correspond to the files in the module.</p> <p>Unit tests are written using <code>pytest</code>, and once the project has been correctly set up, they can be run with the following command:</p> <pre><code>$ uv run pytest tests/unit\n</code></pre>"},{"location":"dev/testing/#functional-testing","title":"Functional testing","text":"<p>Note</p> <p>Functional tests make use of automated Docker container deployments, and thus are very resource-intensive. Make sure your machine is powerful enough to handle them.</p> <p>Warning</p> <p>As of the time of writing this documentation, it is not possible to run functional tests unless you have an iOS device for the initial setup. This is because for now creating test accounts can only be done through the Telegram app on iOS. This is a limitation of Telegram, not Kamihi.</p> <p>Functional tests are located in the <code>tests/functional</code> directory. They are organized by feature, based loosely on the structure of the source code but not constrained by it.</p> <p>Running functional tests requires a bit more setup, as they run on Telegram's test accounts (to avoid bans and FLOOD errors). To create the environment needed for them, you can follow these steps:</p> <ol> <li>Make sure you have Docker and Docker Compose installed on your machine.     <pre><code>$ docker --version\n$ docker compose --version\n</code></pre></li> <li>Create a <code>.env</code> file in the root of the project with the following content, which we will fill in as we go along:     <pre><code>KAMIHI_TESTING__BOT_TOKEN=\nKAMIHI_TESTING__BOT_USERNAME=\nKAMIHI_TESTING__USER_ID=/\nKAMIHI_TESTING__TG_PHONE_NUMBER=/\nKAMIHI_TESTING__TG_API_ID=/\nKAMIHI_TESTING__TG_API_HASH=/\nKAMIHI_TESTING__TG_SESSION=/\nKAMIHI_TESTING__TG_DC_ID=/\nKAMIHI_TESTING__TG_DC_IP=/\n</code></pre></li> <li>Go to your Telegram account's developer panel, sign in with your account, and create a new application.</li> <li>From the 'App configuration' section, you can obtain the values for <code>TG_API_ID</code> (App api_id) and <code>TG_API_HASH</code> (App api_hash).</li> <li>From the 'Available MTProto Servers' section, you can obtain the values for <code>TG_DC_IP</code> (Text field besides 'Test configuration:') and <code>TG_DC_ID</code> (Number just below the IP, prepended by 'DC'). Beware that <code>TG_DC_ID</code> is just the number, without the 'DC' prefix.</li> <li>You need an account on the test servers so you don't hit limitations or risk a ban on your main account. To create a test account:<ol> <li>Get the Telegram app on iOS, if you don't have it already, and log in with your main account (or with any account, really).</li> <li>Tap the Settings icon in the bottom bar ten times to access the developer settings.</li> <li>Select 'Accounts', then 'Login to another account', then 'Test'</li> <li>Input your phone number (must be a valid number that can receive SMS) and tap 'Next', confirm the phone and input the code you receive via SMS.</li> </ol> </li> <li>(optional) You can log in with the test account on the desktop application following this steps:<ol> <li>Go to the sidebar</li> <li>While holding Alt and Shift, right-click on the 'Add account' button</li> <li>Select 'Test server'</li> <li>Log in by scanning the QR code from the Telegram app on iOS that has the test account</li> </ol> </li> <li>Once you hace the test account created, you can fill the value for <code>TG_PHONE_NUMBER</code> with the one you used for the test account, including international prefix and no spaces or other characters, e.g. +15559786475.</li> <li>Now you must obtain your test account's Telegram User ID. The easiest is to message one of the many bots that will provide it for you, like this one. This value corresponds to the `USER_ID' environment variable.</li> <li>For the tests to be able to log in without any user input, two-factor authentication must be skipped. For that to happen, we need a session token. We have a script for that, so to obtain the token, run the following command from the root of the project after having filled in all the values from the previous steps in the <code>.env</code> file:     <pre><code>$ uv run tests/functional/utils/get_string_session.py\n</code></pre>     This value can then be added to the <code>.env</code> file in the <code>TG_SESSION</code> variable.</li> <li>Last, but not least, we need a bot to test on. From your test account, talk to the @BotFather and fill in the <code>BOT_TOKEN</code> and <code>BOT_USERNAME</code> values in the <code>.env</code> file.</li> </ol> <p>Once this odyssey has been completed, you should be able to run the functional tests with the following command:</p> <pre><code>$ uv run pytest tests/functional\n</code></pre>"},{"location":"guides/","title":"Index","text":"<p>In this section, we will cover some of the most common use cases for Kamihi, providing guides on how to implement them.</p>"},{"location":"guides/key-concepts/","title":"Key concepts","text":"<p>These are the most important concepts and definitions used throughout this documentation.</p>"},{"location":"guides/key-concepts/#action","title":"Action","text":"<p>An action is, in its most basic terms, something you can do with your bot. You are in charge of defining them.</p>"},{"location":"guides/key-concepts/#command","title":"Command","text":"<p>A command is a string sent to your bot through Telegram that executes an action. They are always prefixed with a slash (for example, <code>/start</code> or <code>/hello</code>). </p> <p>Info</p> <p>An action may have many commands assigned.</p>"},{"location":"guides/key-concepts/#user","title":"User","text":"<p>A user is someone that has been registered in the framework. Only they can use the actions you define.</p>"},{"location":"guides/key-concepts/#role","title":"Role","text":"<p>A role is, in essence, a group of users. Roles are most commonly used to grant them permission to use actions. Many users can have one role, and users can also have many roles.</p>"},{"location":"guides/key-concepts/#permission","title":"Permission","text":"<p>A permission is a record that tells the bot which users and roles can use which actions. You can have many permissions for each action, each targeting as many users and roles as you want.</p>"},{"location":"guides/actions/commands/","title":"Set commands","text":"<p>This guide explains how command names are assigned from actions and how to customize them.</p>"},{"location":"guides/actions/commands/#default-command","title":"Default command","text":"<p>When decorating a function to turn it into an action, the command will be the name of the function. For example:</p> <pre><code>from kamihi import bot\n\n@bot.action\nasync def test() -&gt; str:\n    return \"Test successful!\"\n</code></pre> <p>This code will register the command <code>/test</code> on Telegram.</p>"},{"location":"guides/actions/commands/#changing-the-default-command","title":"Changing the default command","text":"<p>Sometimes we do not want to use the name of the function name as our command. We can easily change it by passing the command we want to the decorator:</p> <pre><code>from kamihi import bot\n\n@bot.action(\"hello\")\nasync def test() -&gt; str:\n    return \"Test successful!\"\n</code></pre> <p>This will register the command <code>/hello</code> instead of the command <code>/test</code> in Telegram.</p>"},{"location":"guides/actions/commands/#assigning-multiple-commands","title":"Assigning multiple commands","text":"<p>Extending the previous example, we can easily assign multiple commands to an action by passing them to the decorator:</p> <pre><code>from kamihi import bot\n\n@bot.action(\"hello\", \"hola\", \"allo\")\nasync def test() -&gt; str:\n    return \"Test successful!\"\n</code></pre> <p>With this code, all three commands will be registered in Telegram and all will execute the same function <code>test()</code>. </p> <p>Info</p> <p>In this case the function name will not be registered as a command.</p>"},{"location":"guides/config/configure-timezone/","title":"Configure the timezone","text":"<p>The default timezone for the server is UTC. You can change the timezone by setting the <code>TZ</code> environment variable in your <code>.env</code> file. For example, to set the timezone to <code>America/New_York</code>, you would add the following line to your <code>.env</code> file:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>timezone: America/New_York\n</code></pre> <pre><code>KAMIHI_TIMEZONE=America/New_York\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.timezone = \"America/New_York\"\n</code></pre> <p>You can get the list of available timezones from here.</p>"},{"location":"guides/config/load-environment/","title":"Load configuration from environment variables","text":"<p>This guide explains how to load configuration settings for your Kamihi application from environment variables. Using environment variables allows you to configure your application in different environments without modifying your code or configuration files.</p>"},{"location":"guides/config/load-environment/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi project.</li> <li>A basic understanding of Kamihi's configuration system.</li> </ul>"},{"location":"guides/config/load-environment/#configuration-basics","title":"Configuration basics","text":"<p>Kamihi automatically loads configuration settings from environment variables.  Environment variables must be prefixed with <code>KAMIHI_</code> to be recognized by the Kamihi configuration system. Nested settings are defined using double underscores <code>__</code>. For example, the <code>stdout_level</code> attribute within the <code>log</code> section would be represented by the environment variable <code>KAMIHI_LOG__STDOUT_LEVEL</code>.</p> <p>The environment variables correspond to the attributes defined in the <code>KamihiSettings</code> class.</p>"},{"location":"guides/config/load-environment/#steps","title":"Steps","text":"<ol> <li> <p>Define environment variables:</p> <p>Set the desired environment variables in your shell or in a <code>.env</code> file. For example:</p> Environment variables<code>.env</code> file <pre><code>export KAMIHI_LOG__STDOUT_LEVEL=DEBUG\nexport KAMIHI_LOG__FILE_ENABLE=true\nexport KAMIHI_LOG__FILE_PATH=\"app.log\"\n</code></pre> <pre><code>KAMIHI_LOG__STDOUT_LEVEL=DEBUG\nKAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"app.log\"\n</code></pre> </li> <li> <p>Load the settings:</p> <p>The Kamihi framework will automatically load the configuration from the environment variables. You can then access these settings through <code>bot.settings</code>.</p> <pre><code>from kamihi import bot\n\nprint(bot.settings.log.stdout_level)  # Output: DEBUG\n</code></pre> </li> </ol>"},{"location":"guides/config/load-environment/#notes","title":"Notes","text":"<ul> <li>Environment variables will override the default values defined in the <code>KamihiSettings</code> class.</li> <li>Environment variables take precedence over settings in a configuration file.</li> <li>Changes to environment variables require a restart of the Kamihi application to take effect.</li> </ul>"},{"location":"guides/config/load-file/","title":"Load configuration from a file","text":"<p>This guide explains how to load configuration settings for your Kamihi application from a file. Using a configuration file allows you to easily manage and modify settings without altering your code.</p>"},{"location":"guides/config/load-file/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi project.</li> <li>A basic understanding of Kamihi's configuration system.</li> </ul>"},{"location":"guides/config/load-file/#configuration-basics","title":"Configuration basics","text":"<p>Kamihi supports loading configuration from YAML files. By default, it looks for a file named <code>kamihi.yaml</code> in the same directory as your application. You can also specify a custom file path using the <code>KAMIHI_CONFIG_FILE</code> environment variable.</p> <p>The configuration file should contain settings that correspond to the attributes defined in your <code>KamihiSettings</code> class.</p>"},{"location":"guides/config/load-file/#steps","title":"Steps","text":"<ol> <li> <p>Create a configuration file:</p> <p>Create a file named <code>kamihi.yaml</code> (or choose a different name) in your project directory. Add your desired configuration settings to this file. For example:</p> <pre><code>log:\n  stdout_level: DEBUG\n  file_enable: true\n  file_path: \"app.log\"\n</code></pre> </li> <li> <p>Specify the configuration file (optional):</p> <p>If you are not using the default <code>kamihi.yaml</code> file, set the <code>KAMIHI_CONFIG_FILE</code> environment variable to the path of your configuration file. This can be done in your shell or in a <code>.env</code> file:</p> Environment variable<code>.env</code> file <pre><code>export KAMIHI_CONFIG_FILE=/path/to/your/config.yaml\n</code></pre> <pre><code>KAMIHI_CONFIG_FILE=/path/to/your/config.yaml\n</code></pre> </li> <li> <p>Load the settings:</p> <p>When your Kamihi application starts, it will automatically load the configuration from the specified file (or the default <code>kamihi.yaml</code> if no environment variable is set).  You can then access these settings through <code>bot.settings</code>.</p> <pre><code>from kamihi import bot\n\nprint(bot.settings.log.stdout_level)  # Output: DEBUG\n</code></pre> </li> </ol>"},{"location":"guides/config/load-file/#notes","title":"Notes","text":"<ul> <li>Settings in the configuration file will override the default values defined in your <code>KamihiSettings</code> class.</li> <li>Environment variables (e.g., <code>KAMIHI_LOG__STDOUT_LEVEL</code>) will take precedence over settings in the configuration file.</li> <li>If the file specified by <code>KAMIHI_CONFIG_FILE</code> does not exist, Kamihi will fall back to the default <code>kamihi.yaml</code> file, or to the default settings if that file doesn't exist either.</li> </ul>"},{"location":"guides/config/load-prog/","title":"Set configuration values programmatically","text":"<p>This guide explains how to configure your Kamihi application programmatically. This method is useful when you need to dynamically generate or modify configuration settings within your code.</p>"},{"location":"guides/config/load-prog/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi project.</li> <li>A basic understanding of Kamihi's configuration system.</li> </ul>"},{"location":"guides/config/load-prog/#configuration-basics","title":"Configuration basics","text":"<p>Kamihi allows you to configure settings directly in your Python code by instantiating and modifying the <code>KamihiSettings</code> class. This approach bypasses the need for environment variables or configuration files, providing greater flexibility for dynamic configurations.</p>"},{"location":"guides/config/load-prog/#steps","title":"Steps","text":"<ol> <li>Import the bot instance: <pre><code>from kamihi import bot\n</code></pre></li> <li>Set the desired settings programmatically: You can set the desired settings directly on the <code>bot.settings</code> object. For example:     <pre><code>bot.settings.log.stdout_level = \"DEBUG\"\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"app.log\"\n</code></pre></li> </ol>"},{"location":"guides/config/load-prog/#notes","title":"Notes","text":"<ul> <li>Programmatically set settings will override default values and settings loaded from configuration files or environment variables.</li> <li>Configuration changes made programmatically will not be validated against the schema defined in the <code>KamihiSettings</code> class. Ensure that the values you set are valid according to the expected types and formats.</li> <li>This method is ideal for scenarios where configuration needs to be determined at runtime based on application logic or external factors.</li> </ul>"},{"location":"guides/logging/configure-notifications/","title":"Configure notifications","text":"<p>This guide shows you how to set up log notifications in Kamihi to receive alerts for important log events through various notification services.</p>"},{"location":"guides/logging/configure-notifications/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi application</li> <li>Access to one or more notification services (Discord, Slack, Email, Telegram, etc.)</li> <li>Basic understanding of log levels</li> </ul>"},{"location":"guides/logging/configure-notifications/#configure-notification-logging","title":"Configure notification logging","text":"<p>Add the appropriate configuration to your Kamihi application to enable notification logging:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n  # Enable notification logging\n  notification_enable: true\n\n  # Set the minimum log level that triggers notifications\n  notification_level: ERROR\n\n  # Add notification service URLs (Apprise format)\n  notification_urls:\n    - discord://webhook_id/webhook_token\n    - slack://token/channel\n    - telegram://bot_token/chat_id\n</code></pre> <pre><code># Enable notification logging\nKAMIHI_LOG__NOTIFICATION_ENABLE=true\n\n# Set the minimum log level that triggers notifications\nKAMIHI_LOG__NOTIFICATION_LEVEL=ERROR\n\n# Add notification service URLs (Apprise format)\n# For multiple URLs, use comma-separated values\nKAMIHI_LOG__NOTIFICATION_URLS=discord://webhook_id/webhook_token,slack://token/channel\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.notification_enable = True\nbot.settings.log.notification_level = \"ERROR\"\nbot.settings.log.notification_urls = [\n    \"discord://webhook_id/webhook_token\",\n    \"slack://token/channel\",\n    \"telegram://bot_token/chat_id\"\n]\n</code></pre>"},{"location":"guides/logging/configure-notifications/#setting-up-notification-services","title":"Setting up notification services","text":""},{"location":"guides/logging/configure-notifications/#telegram","title":"Telegram","text":"<p>You can use the same Telegram bot token and chat ID that you use for the main bot. To set up notifications:</p> <ol> <li>Get your bot token</li> <li>Get your chat ID (you can use the <code>getUpdates</code> method to find it)</li> <li>Use the format: <code>telegram://bot_token/chat_id</code></li> </ol>"},{"location":"guides/logging/configure-notifications/#discord","title":"Discord","text":"<p>To set up Discord notifications:</p> <ol> <li>In your Discord server, go to Server Settings &gt; Integrations &gt; Webhooks</li> <li>Click New Webhook, give it a name and select a channel</li> <li>Click Copy Webhook URL</li> <li>Use this URL in the format: <code>discord://webhook_id/webhook_token</code></li> </ol>"},{"location":"guides/logging/configure-notifications/#slack","title":"Slack","text":"<p>To set up Slack notifications:</p> <ol> <li>Create a Slack app at https://api.slack.com/apps</li> <li>Enable Incoming Webhooks for your app</li> <li>Add a new webhook to your workspace</li> <li>Copy the webhook URL</li> <li>Use this URL in the format: <code>slack://token/channel</code></li> </ol>"},{"location":"guides/logging/configure-notifications/#email","title":"Email","text":"<p>To set up email notifications:</p> <ol> <li>Use the format: <code>mailto://user:password@gmail.com</code></li> <li>For Gmail, you may need to create an app password</li> </ol>"},{"location":"guides/logging/configure-notifications/#other-services","title":"Other services","text":"<p>Please refer to the Apprise documentation for more information on how to set up other supported notification services.</p>"},{"location":"guides/logging/configure-notifications/#testing-your-notifications","title":"Testing your notifications","text":"<p>You can use a simple script to test that your notifications are working:</p> <pre><code>from loguru import logger\n\n# This will send a notification if you've set notification_level to ERROR or lower\nlogger.error(\"Test notification - this is an error message\")\n\n# This will send a notification if you've set notification_level to CRITICAL\nlogger.critical(\"Test notification - this is a critical message\")\n</code></pre>"},{"location":"guides/logging/configure-rotation-retention/","title":"Configure file log rotation and retention","text":"<p>This guide shows you how to set up file logging with rotation and retention policies in Kamihi, preventing log files from growing too large and managing disk space efficiently.</p>"},{"location":"guides/logging/configure-rotation-retention/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi project</li> <li>Basic understanding of Kamihi's configuration system</li> </ul>"},{"location":"guides/logging/configure-rotation-retention/#configuration-basics","title":"Configuration basics","text":"<p>Kamihi uses the following configuration options for log rotation and retention:</p> <ul> <li><code>log.file_enable</code> (<code>KAMIHI_LOG__FILE_ENABLE</code>): Enable file logging</li> <li><code>log.file_path</code> (<code>KAMIHI_LOG__FILE_PATH</code>): Path to the log file</li> <li><code>log.file_rotation</code> (<code>KAMIHI_LOG__FILE_ROTATION</code>): Rotation policy</li> <li><code>log.file_retention</code> (<code>KAMIHI_LOG__FILE_RETENTION</code>): Retention policy</li> </ul> <p>To understand how to set configuration options, refer to the configuration guide.</p>"},{"location":"guides/logging/configure-rotation-retention/#common-logging-scenarios","title":"Common logging scenarios","text":""},{"location":"guides/logging/configure-rotation-retention/#high-volume-production-applications","title":"High-volume production applications","text":"<p>If your application produces high-volume logs (e.g., many requests per second), the following settings are recommended</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\nfile_enable: true\nfile_path: \"/var/log/kamihi/app.log\"\nfile_rotation: \"100 MB\" # Rotate when the file reaches 100 MB\nfile_retention: \"10 days\" # Keep logs for 10 days\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"/var/log/kamihi/app.log\"\nKAMIHI_LOG__FILE_ROTATION=\"100 MB\" # Rotate when the file reaches 100 MB\nKAMIHI_LOG__FILE_RETENTION=\"10 days\" # Keep logs for 10 days\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"/var/log/kamihi/app.log\"\nbot.settings.log.file_rotation = \"100 MB\"  # Rotate when the file reaches 100 MB\nbot.settings.log.file_retention = \"10 days\"  # Keep logs for 10 days\n</code></pre> <p>Alternatively, for containers or environments with limited disk space, you can use a more conservative approach:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\nfile_enable: true\nfile_path: \"/var/log/kamihi/app.log\"\nfile_rotation: \"50 MB\" # Rotate when the file reaches 50 MB\nfile_retention: \"3 days\" # Keep logs for 3 days\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"/var/log/kamihi/app.log\"\nKAMIHI_LOG__FILE_ROTATION=\"50 MB\" # Rotate when the file reaches 50 MB\nKAMIHI_LOG__FILE_RETENTION=\"3 days\" # Keep logs for 3 days\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"/var/log/kamihi/app.log\"\nbot.settings.log.file_rotation = \"50 MB\"  # Rotate when the file reaches 50 MB\nbot.settings.log.file_retention = \"3 days\"  # Keep logs for 3 days\n</code></pre>"},{"location":"guides/logging/configure-rotation-retention/#background-or-batch-processing-applications","title":"Background or batch processing applications","text":"<p>If your application runs scheduled jobs or processes data in batches, you can configure daily rotation to match your job schedule:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\nfile_enable: true\nfile_path: \"/var/log/kamihi/app.log\"\nfile_rotation: \"1 day\" # Rotate daily\nfile_retention: \"7 days\" # Keep logs for 7 days\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"/var/log/kamihi/app.log\"\nKAMIHI_LOG__FILE_ROTATION=\"1 day\" # Rotate daily\nKAMIHI_LOG__FILE_RETENTION=\"7 days\" # Keep logs for 7 days\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"/var/log/kamihi/app.log\"\nbot.settings.log.file_rotation = \"1 day\"  # Rotate daily\nbot.settings.log.file_retention = \"7 days\"  # Keep logs for 7 days\n</code></pre>"},{"location":"guides/logging/configure-rotation-retention/#development-environments","title":"Development environments","text":"<p>For local development, we do not recommend using file logging, as it can clutter your workspace. However, if you want to keep logs for debugging purposes, you can set a short retention period:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\nfile_enable: true\nfile_path: \"app.log\"\nfile_rotation: \"1 hour\" # Rotate every hour\nfile_retention: \"1 day\" # Keep logs for 1 day\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"app.log\"\nKAMIHI_LOG__FILE_ROTATION=\"1 hour\" # Rotate every hour\nKAMIHI_LOG__FILE_RETENTION=\"1 day\" # Keep logs for 1 day\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"app.log\"\nbot.settings.log.file_rotation = \"1 hour\"  # Rotate every hour\nbot.settings.log.file_retention = \"1 day\"  # Keep logs for 1 day\n</code></pre>"},{"location":"guides/logging/configure-rotation-retention/#advanced-usage","title":"Advanced usage","text":"<p>Please refer to the <code>loguru</code> documentation for more advanced usage, including custom rotation and retention policies.</p>"},{"location":"guides/logging/configure-structured/","title":"Configure structured logging","text":"<p>Structured logging transforms your application logs into machine-readable JSON format instead of plain text. You should enable structured logging when:</p> <ul> <li>You need to process logs programmatically</li> <li>You're integrating with modern log management systems</li> <li>You want to enable advanced filtering and searching capabilities</li> <li>You need to track complex relationships between log events</li> </ul> <p>Structured logs make it easier to analyze patterns, troubleshoot issues, and extract metrics from your application's operation.</p>"},{"location":"guides/logging/configure-structured/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi application</li> <li>Basic understanding of Kamihi configuration</li> </ul>"},{"location":"guides/logging/configure-structured/#enable-structured-logging","title":"Enable structured logging","text":"<p>Add the appropriate configuration to your Kamihi application to enable structured logging:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n  # Enable structured logging for stdout\n  stdout_serialize: true\n\n  # Enable structured logging for stderr\n  stderr_enable: true\n  stderr_serialize: true\n\n  # Enable structured logging for file output\n  file_enable: true\n  file_path: kamihi.json\n  file_serialize: true\n</code></pre> <pre><code># Enable structured logging for stdout\nKAMIHI_LOG__STDOUT_SERIALIZE=true\n\n# Enable structured logging for stderr\nKAMIHI_LOG__STDERR_ENABLE=true\nKAMIHI_LOG__STDERR_SERIALIZE=true\n\n# Enable structured logging for file output\nKAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=kamihi.json\nKAMIHI_LOG__FILE_SERIALIZE=true\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.stdout_serialize = True\n\nbot.settings.log.stderr_enable = True\nbot.settings.log.stderr_serialize = True\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"kamihi.json\"\nbot.settings.log.file_serialize = True\n</code></pre>"},{"location":"guides/logging/configure-structured/#checking-your-structured-logs","title":"Checking your structured logs","text":"<p>When structured logging is enabled, your logs will be output as JSON objects. Each log entry will be a single line containing a JSON object that includes details like timestamp, log level, message text, and contextual information.</p>"},{"location":"guides/logging/configure-structured/#related-documentation","title":"Related documentation","text":"<p>Refer to the Loguru documentation for more details on structured logging capabilities and how to add contextual information to your logs.</p>"},{"location":"guides/logging/setup-basic/","title":"Set up basic logging","text":"<p>This guide shows you how to configure and use basic logging in your Kamihi application.</p> <p>If you need to capture application activity for debugging or monitoring, configure logging as described below.</p>"},{"location":"guides/logging/setup-basic/#configuring-console-logging","title":"Configuring console logging","text":"<p>Console logging to <code>stdout</code> is enabled by default. You can configure it in several ways:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n    stdout_level: DEBUG # default is INFO\n</code></pre> <pre><code>KAMIHI_LOG__STDOUT_LEVEL=DEBUG # default is INFO\n</code></pre> <pre><code>from kamihi import bot\n\n# Set the logging level for stdout\nbot.settings.log.stdout_level = \"DEBUG\"  # default is INFO\n</code></pre>"},{"location":"guides/logging/setup-basic/#configuring-stderr-logging","title":"Configuring <code>stderr</code> logging","text":"<p>If you want to log to <code>stderr</code>, you can enable and configure it similarly:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n    stderr_enable: true\n    stderr_level: ERROR\n</code></pre> <pre><code>KAMIHI_LOG__STDERR_ENABLE=true\nKAMIHI_LOG__STDERR_LEVEL=ERROR\n</code></pre> <pre><code>from kamihi import bot\n\n# Enable and set the logging level for stderr\nbot.settings.log.stderr_enable = True\nbot.settings.log.stderr_level = \"ERROR\"\n</code></pre>"},{"location":"guides/logging/setup-basic/#adding-file-logging","title":"Adding file logging","text":"<p>If you need to store logs in a file:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n    file_enable: true\n    file_path: app.log # Path to the log file, default is \"kamihi.log\"\n    file_level: DEBUG\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=app.log # Path to the log file, default is \"kamihi.log\"\nKAMIHI_LOG__FILE_LEVEL=DEBUG\n</code></pre> <pre><code>from kamihi import bot\n\n# Enable file logging and set the log file path and level\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"app.log\"  # Path to the log file, default is \"kamihi.log\"\nbot.settings.log.file_level = \"DEBUG\"\n</code></pre>"},{"location":"guides/users/extend/","title":"Extend the user model","text":"<p>This guide shows how to extend and customize the user model of the framework. You can do this if you need to store more data about your users than just their Telegram ID and their admin status.</p>"},{"location":"guides/users/extend/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi application</li> <li>Basic understanding of how MongoDB works</li> </ul>"},{"location":"guides/users/extend/#extending-the-user-class","title":"Extending the User class","text":"<p>You can import the base user class into your code and create a subclass extending it. For the framework to actually use this model, you also have to decorate it with <code>@bot.user_class</code>. Thus:</p> <pre><code>from kamihi import bot, BaseUser\nfrom mongoengine import StringField\n\n\n@bot.user_class\nclass User(BaseUser):\n    name: str = StringField()\n</code></pre> <p>The user model (and every other model in the framework) is defined using MongoEngine, and you can add any of the fields supported by it.</p>"},{"location":"tutorials/installation/","title":"Installation","text":"<p>Warning</p> <p>The project is in alpha stage and not ready for any use. This tutorial does not work yet, and it is included so it can be later updated.</p> <p>In this tutorial, we will install Kamihi using <code>uv</code> and verify that it works correctly.</p>"},{"location":"tutorials/installation/#python-package","title":"Python package","text":"<p>Kamihi is published as a Python package on PyPI. We can install it using any package manager that supports Python packages, such as <code>pip</code>, <code>poetry</code>, or <code>uv</code>. We recommend using <code>uv</code> for its speed and simplicity.</p> uvpippoetry <p>uv add kamihiInstalled 1 package in XXms+ kamihi==X.X.X</p> <p>pip install kamihiCollecting kamihiDownloading kamihi-X.X.X-py3-none-any.whl (XX kB)Installing collected packages: kamihiSuccessfully installed kamihi-X.X.X</p> <p>poetry add kamihiUsing version X.X.X for kamihiUpdating dependenciesResolving dependencies... (0.0s)Writing lock filePackage operations: 1 install, 0 updates, 0 removals  - Installing kamihi (X.X.X)Successfully installed kamihi-X.X.X</p>"},{"location":"tutorials/installation/#verification","title":"Verification","text":"<p>Now let's verify our installation by running the following command:</p> <pre><code>$ python -c \"from kamihi import __version__; print(__version__)\"\n\nX.X.X\n</code></pre>"},{"location":"tutorials/installation/#next-steps","title":"Next steps","text":"<p>You've successfully installed Kamihi and verified it's working! Now, we can create our first project. Check out the quick start guide to get started.</p>"},{"location":"tutorials/quick-start/","title":"Quick start","text":""},{"location":"tutorials/quick-start/#getting-your-token","title":"Getting your token","text":"<p>To create a bot, you need a token. This token is a unique identifier for your bot and is used to authenticate it with the Telegram API. You can get your token by talking to @BotFather on Telegram. Just send him the <code>/newbot</code> command and follow the instructions. He'll give you a token that looks like this: <code>123456789:ABC-DEF1234ghIkl-zyx57W2P0s</code>.</p>"},{"location":"tutorials/quick-start/#creating-the-bot","title":"Creating the bot","text":"<p>You can create your first bot in three lines. No, really! Just three lines. Here's how:</p> <pre><code>from kamihi import bot\n\nbot.settings.token = \"123456789:ABC-DEF1234ghIkl-zyx57W2P0s\"\n\nbot.start()\n</code></pre> <p>Just replace the token with the one you got from BotFather. That's it! You've created your first bot.</p>"},{"location":"tutorials/quick-start/#running-the-bot","title":"Running the bot","text":"<p>To run the bot, just execute the script. You can do this in your terminal or command prompt. Just navigate to the directory where you saved the script and run:</p> <pre><code>uv run your_script.py # or `python your_script.py`\n</code></pre>"},{"location":"tutorials/quick-start/#making-the-bot-do-something","title":"Making the bot do something","text":"<p>Right now, your bot doesn't do anything other that apologize for not being able to do anything. We can change this by making our first action. Let's make the bot respond to the <code>/start</code> command with a friendly message. Here's how:</p> <pre><code>from kamihi import bot\n\nbot.settings.token = \"123456789:ABC-DEF1234ghIkl-zyx57W2P0s\"\n\n@bot.action\nasync def start():\n    return \"Hello! I'm your friendly bot. How can I help you today?\"\n\nbot.start()\n</code></pre> <p>You can restart the bot and send the <code>/start</code> command to it now, but the bot will not answer you with the message we programmed. That is because first, you have to register yourself as a user and give yourself permission to use that command.</p>"},{"location":"tutorials/quick-start/#registering-your-first-user","title":"Registering your first user","text":"<p>While the bot was running, you may have noticed that in the logs it notifies you that there is an administrator interface at http://localhost:4242. It is in here that you can add users, permissions and the such.</p> <p>Navigating to that page, you will find a simple interface to manage your bot. You can select the section 'Users' and add a new one with your Telegram ID, which you can obtain from the logs of the bot, or by messaging this bot on Telegram.</p> <p>If you mark your user as administrator, you will immediately be able to use the <code>/start</code> command you made in the previous section.</p> <p>You can also navigate to the section 'Permissions' and add one for that action and your user.</p>"},{"location":"tutorials/quick-start/#configuring-the-bot","title":"Configuring the bot","text":"<p>This first bot is looking very nice, but we can polish it a bit more.</p> <p>Having the token hardcoded in your script is not a good practice. You can instead use environment variables, an environment variable file or a configuration file to store this and any other configuration options:</p> Configuration file<code>.env</code> fileEnvironment variables <p>Create a file named <code>kamihi.yaml</code> in the same directory as your script with the following content: <pre><code>token: \"123456789:ABC-DEF1234ghIkl-zyx57W2P0s\"\n</code></pre></p> <p>Create a file named <code>.env</code> in the same directory as your script with the following content: <pre><code>KAMIHI_TOKEN=\"123456789:ABC-DEF1234ghIkl-zyx57W2P0s\"\n</code></pre></p> <p>Set the environment variable in the same terminal session where you run the script: <pre><code>export KAMIHI_TOKEN=\"123456789:ABC-DEF1234ghIkl-zyx57W2P0s\"\n</code></pre></p> <p>In your script, just remove the token from the <code>bot.start()</code> call: <pre><code>from kamihi import bot\n\n@bot.action\nasync def start():\n    return \"Hello! I'm your friendly bot. How can I help you today?\"\n\nbot.start()\n</code></pre></p> <p>The bot will automatically read the token from the configuration file, <code>.env</code> file or environment variable and use it.</p>"},{"location":"tutorials/quick-start/#what-now","title":"What now?","text":"<p>Now that you have a basic bot up and running, you can start adding more actions to it. We have just scratched the surface of what you can do with Kamihi. Check out the guides for more in-depth information on how to use Kamihi to the fullest.</p>"},{"location":"reference/kamihi/","title":"kamihi","text":""},{"location":"reference/kamihi/#kamihi","title":"kamihi","text":"<p>Kamihi is a Python framework for creating and managing Telegram bots.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi import bot\n&gt;&gt;&gt; bot.start()\n</code></pre> License <p>MIT</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>The version of the package.</p> <code>bot</code> <code>Bot</code> <p>The bot instance for the Kamihi framework. Preferable to using the Bot class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Modules:</p> Name Description <code>base</code> <p>Base module for the Kamihi framework.</p> <code>bot</code> <p>Bot module for Kamihi.</p> <code>db</code> <p>Database connections module for the Kamihi framework.</p> <code>templates</code> <p>Template module for Kamihi.</p> <code>tg</code> <p>Telegram module for Kamihi.</p> <code>users</code> <p>Users module of the Kamihi framework.</p> <code>web</code> <p>Web interface module for Kamihi.</p> <p>Classes:</p> Name Description <code>BaseUser</code> <p>Placeholder for the User model.</p> <code>KamihiSettings</code> <p>Defines the configuration schema for the Kamihi framework.</p>"},{"location":"reference/kamihi/#kamihi.BaseUser","title":"BaseUser","text":"<p>               Bases: <code>Document</code></p> <p>Placeholder for the User model.</p> <p>Methods:</p> Name Description <code>get_model</code> <p>Get the model class for the User.</p> <code>set_model</code> <p>Set the model class for the User.</p>"},{"location":"reference/kamihi/#kamihi.BaseUser.get_model","title":"get_model  <code>classmethod</code>","text":"<pre><code>get_model() -&gt; type[User]\n</code></pre> <p>Get the model class for the User.</p> <p>Returns:</p> Name Type Description <code>type</code> <code>type[User]</code> <p>The model class for the User.</p> Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef get_model(cls) -&gt; type[\"User\"]:\n    \"\"\"\n    Get the model class for the User.\n\n    Returns:\n        type: The model class for the User.\n\n    \"\"\"\n    return cls if cls._model is None else cls._model\n</code></pre>"},{"location":"reference/kamihi/#kamihi.BaseUser.set_model","title":"set_model  <code>classmethod</code>","text":"<pre><code>set_model(model: type[User]) -&gt; None\n</code></pre> <p>Set the model class for the User.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The model class to set.</p> required Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef set_model(cls, model: type[\"User\"]) -&gt; None:\n    \"\"\"\n    Set the model class for the User.\n\n    Args:\n        model (type): The model class to set.\n\n    \"\"\"\n    cls._model = model\n</code></pre>"},{"location":"reference/kamihi/#kamihi.BaseUser.set_model(model)","title":"<code>model</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings","title":"KamihiSettings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Defines the configuration schema for the Kamihi framework.</p> <p>Attributes:</p> Name Type Description <code>timezone</code> <code>str</code> <p>The timezone for the application.</p> <code>autoreload_templates</code> <code>bool</code> <p>Whether to enable template auto-reloading.</p> <code>log</code> <code>LogSettings</code> <p>The logging settings.</p> <code>db</code> <code>DatabaseSettings</code> <p>The database settings.</p> <code>token</code> <code>str | None</code> <p>The Telegram bot token.</p> <code>responses</code> <code>ResponseSettings</code> <p>The response settings.</p> <code>web</code> <code>WebSettings</code> <p>The web settings.</p> <p>Methods:</p> Name Description <code>settings_customise_sources</code> <p>Customize the order of settings sources.</p>"},{"location":"reference/kamihi/#kamihi.KamihiSettings.timezone_obj","title":"timezone_obj  <code>property</code>","text":"<pre><code>timezone_obj: DstTzInfo\n</code></pre> <p>Get the timezone object.</p> <p>Returns:</p> Name Type Description <code>DstTzInfo</code> <code>DstTzInfo</code> <p>The timezone object.</p>"},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> <p>Customize the order of settings sources.</p> <p>This method allows you to customize the order in which settings sources are loaded. The order of sources is important because it determines which settings take precedence when there are conflicts. The order of sources is as follows:     1. Environment variables     2. .env file     3. YAML file     4. Initial settings</p> <p>Parameters:</p> Name Type Description Default <code>type[BaseSettings]</code> <p>the settings class to customize sources for</p> required <code>PydanticBaseSettingsSource</code> <p>settings from class initialization</p> required <code>PydanticBaseSettingsSource</code> <p>settings from environment variables</p> required <code>PydanticBaseSettingsSource</code> <p>settings from .env file</p> required <code>PydanticBaseSettingsSource</code> <p>settings from file secrets</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[PydanticBaseSettingsSource, ...]</code> <p>A tuple containing the customized settings sources in the desired order.</p> Source code in <code>src/kamihi/base/config.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n    \"\"\"\n    Customize the order of settings sources.\n\n    This method allows you to customize the order in which settings sources are\n    loaded. The order of sources is important because it determines which settings\n    take precedence when there are conflicts.\n    The order of sources is as follows:\n        1. Environment variables\n        2. .env file\n        3. YAML file\n        4. Initial settings\n\n    Args:\n        settings_cls: the settings class to customize sources for\n        init_settings: settings from class initialization\n        env_settings: settings from environment variables\n        dotenv_settings: settings from .env file\n        file_secret_settings: settings from file secrets\n\n    Returns:\n        tuple: A tuple containing the customized settings sources in the desired order.\n\n    \"\"\"\n    return (\n        init_settings,\n        env_settings,\n        dotenv_settings,\n        YamlConfigSettingsSource(settings_cls, yaml_file=os.getenv(\"KAMIHI_CONFIG_FILE\", \"kamihi.yaml\")),\n        file_secret_settings,\n    )\n</code></pre>"},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(settings_cls)","title":"<code>settings_cls</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(init_settings)","title":"<code>init_settings</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(env_settings)","title":"<code>env_settings</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(dotenv_settings)","title":"<code>dotenv_settings</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(file_secret_settings)","title":"<code>file_secret_settings</code>","text":""},{"location":"reference/kamihi/base/","title":"kamihi.base","text":""},{"location":"reference/kamihi/base/#kamihi.base","title":"kamihi.base","text":"<p>Base module for the Kamihi framework.</p> <p>Provides base utilities and classes for the framework.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>config</code> <p>Configuration module.</p> <code>logging</code> <p>Logging configuration module.</p> <code>manual_send</code> <p>Module for sending alerts to notification services.</p>"},{"location":"reference/kamihi/base/config/","title":"kamihi.base.config","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config","title":"kamihi.base.config","text":"<p>Configuration module.</p> <p>This module contains the configuration settings for the Kamihi framework. The configuration settings are loaded from environment variables and/or a <code>.env</code> file. They must begin with the prefix <code>KAMIHI_</code>.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>DatabaseSettings</code> <p>Defines the database settings schema.</p> <code>KamihiSettings</code> <p>Defines the configuration schema for the Kamihi framework.</p> <code>LogSettings</code> <p>Defines the logging configuration schema.</p> <code>ResponseSettings</code> <p>Defines the response settings schema.</p> <code>WebSettings</code> <p>Defines the web settings schema.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.DatabaseSettings","title":"DatabaseSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the database settings schema.</p> <p>Attributes:</p> Name Type Description <code>host</code> <code>str</code> <p>The URL of the database.</p> <code>name</code> <code>str</code> <p>The name of the database.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings","title":"KamihiSettings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Defines the configuration schema for the Kamihi framework.</p> <p>Attributes:</p> Name Type Description <code>timezone</code> <code>str</code> <p>The timezone for the application.</p> <code>autoreload_templates</code> <code>bool</code> <p>Whether to enable template auto-reloading.</p> <code>log</code> <code>LogSettings</code> <p>The logging settings.</p> <code>db</code> <code>DatabaseSettings</code> <p>The database settings.</p> <code>token</code> <code>str | None</code> <p>The Telegram bot token.</p> <code>responses</code> <code>ResponseSettings</code> <p>The response settings.</p> <code>web</code> <code>WebSettings</code> <p>The web settings.</p> <p>Methods:</p> Name Description <code>settings_customise_sources</code> <p>Customize the order of settings sources.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.timezone_obj","title":"timezone_obj  <code>property</code>","text":"<pre><code>timezone_obj: DstTzInfo\n</code></pre> <p>Get the timezone object.</p> <p>Returns:</p> Name Type Description <code>DstTzInfo</code> <code>DstTzInfo</code> <p>The timezone object.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> <p>Customize the order of settings sources.</p> <p>This method allows you to customize the order in which settings sources are loaded. The order of sources is important because it determines which settings take precedence when there are conflicts. The order of sources is as follows:     1. Environment variables     2. .env file     3. YAML file     4. Initial settings</p> <p>Parameters:</p> Name Type Description Default <code>type[BaseSettings]</code> <p>the settings class to customize sources for</p> required <code>PydanticBaseSettingsSource</code> <p>settings from class initialization</p> required <code>PydanticBaseSettingsSource</code> <p>settings from environment variables</p> required <code>PydanticBaseSettingsSource</code> <p>settings from .env file</p> required <code>PydanticBaseSettingsSource</code> <p>settings from file secrets</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[PydanticBaseSettingsSource, ...]</code> <p>A tuple containing the customized settings sources in the desired order.</p> Source code in <code>src/kamihi/base/config.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n    \"\"\"\n    Customize the order of settings sources.\n\n    This method allows you to customize the order in which settings sources are\n    loaded. The order of sources is important because it determines which settings\n    take precedence when there are conflicts.\n    The order of sources is as follows:\n        1. Environment variables\n        2. .env file\n        3. YAML file\n        4. Initial settings\n\n    Args:\n        settings_cls: the settings class to customize sources for\n        init_settings: settings from class initialization\n        env_settings: settings from environment variables\n        dotenv_settings: settings from .env file\n        file_secret_settings: settings from file secrets\n\n    Returns:\n        tuple: A tuple containing the customized settings sources in the desired order.\n\n    \"\"\"\n    return (\n        init_settings,\n        env_settings,\n        dotenv_settings,\n        YamlConfigSettingsSource(settings_cls, yaml_file=os.getenv(\"KAMIHI_CONFIG_FILE\", \"kamihi.yaml\")),\n        file_secret_settings,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(settings_cls)","title":"<code>settings_cls</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(init_settings)","title":"<code>init_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(env_settings)","title":"<code>env_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(dotenv_settings)","title":"<code>dotenv_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(file_secret_settings)","title":"<code>file_secret_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.LogSettings","title":"LogSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the logging configuration schema.</p> <p>Attributes:</p> Name Type Description <code>stdout_enable</code> <code>bool</code> <p>Enable or disable stdout logging.</p> <code>stdout_level</code> <code>str</code> <p>Log level for stdout logging.</p> <code>stdout_serialize</code> <code>bool</code> <p>Enable or disable serialization for stdout logging.</p> <code>stderr_enable</code> <code>bool</code> <p>Enable or disable stderr logging.</p> <code>stderr_level</code> <code>str</code> <p>Log level for stderr logging.</p> <code>stderr_serialize</code> <code>bool</code> <p>Enable or disable serialization for stderr logging.</p> <code>file_enable</code> <code>bool</code> <p>Enable or disable file logging.</p> <code>file_level</code> <code>str</code> <p>Log level for file logging.</p> <code>file_path</code> <code>str</code> <p>Path to the log file.</p> <code>file_serialize</code> <code>bool</code> <p>Enable or disable serialization for file logging.</p> <code>file_rotation</code> <code>str</code> <p>Rotation policy for the log file.</p> <code>file_retention</code> <code>str</code> <p>Retention policy for the log file.</p> <code>notification_enable</code> <code>bool</code> <p>Enable or disable notification logging.</p> <code>notification_level</code> <code>str</code> <p>Log level for notification logging.</p> <code>notification_urls</code> <code>list[str]</code> <p>List of URLs for notification services.</p> <p>Methods:</p> Name Description <code>validate_log_level</code> <p>Validate the log level value.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.LogSettings.validate_log_level","title":"validate_log_level  <code>classmethod</code>","text":"<pre><code>validate_log_level(value: str) -&gt; str\n</code></pre> <p>Validate the log level value.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The log level value to validate.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The validated log level value.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the log level is invalid.</p> Source code in <code>src/kamihi/base/config.py</code> <pre><code>@field_validator(\"stdout_level\", \"stderr_level\", \"file_level\", \"notification_level\")\n@classmethod\ndef validate_log_level(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the log level value.\n\n    Args:\n        value (str): The log level value to validate.\n\n    Returns:\n        str: The validated log level value.\n\n    Raises:\n        ValueError: If the log level is invalid.\n\n    \"\"\"\n    value = value.upper()\n\n    if not re.match(_LEVEL_PATTERN, value):\n        msg = f\"Invalid log level: {value}\"\n        raise ValueError(msg)\n\n    return value\n</code></pre>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.LogSettings.validate_log_level(value)","title":"<code>value</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.ResponseSettings","title":"ResponseSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the response settings schema.</p> <p>Attributes:</p> Name Type Description <code>default_enabled(bool)</code> <p>Whether to enable the default message</p> <code>default_message(str)</code> <p>The message to return when no handler has been triggered</p> <code>error_message(str)</code> <p>The message to send to the user when an error happens</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.WebSettings","title":"WebSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the web settings schema.</p> <p>Attributes:</p> Name Type Description <code>secret</code> <code>str</code> <p>The secret key for the web server.</p> <code>host</code> <code>str</code> <p>The host of the web interface.</p> <code>port</code> <code>int</code> <p>The port of the web interface.</p>"},{"location":"reference/kamihi/base/logging/","title":"kamihi.base.logging","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging","title":"kamihi.base.logging","text":"<p>Logging configuration module.</p> <p>This module provides functions to configure logging for the Kamihi framework.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi.base.logging import configure_logging\n&gt;&gt;&gt; from kamihi.base.config import LogSettings\n&gt;&gt;&gt; from loguru import logger\n&gt;&gt;&gt; settings = LogSettings()\n&gt;&gt;&gt; configure_logging(logger, settings)\n&gt;&gt;&gt; logger.info(\"This is an info message.\")\n</code></pre> <p>Classes:</p> Name Description <code>MongoLogger</code> <p>MongoDB command logger.</p> <p>Functions:</p> Name Description <code>configure_logging</code> <p>Configure logging for the module.</p>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger","title":"MongoLogger","text":"<pre><code>MongoLogger(logger: Logger)\n</code></pre> <p>               Bases: <code>CommandListener</code></p> <p>MongoDB command logger.</p> <p>This class listens to MongoDB commands and logs them using the loguru logger.</p> <p>Parameters:</p> Name Type Description Default <code>Logger</code> <p>The loguru logger instance to use for logging.</p> required <p>Initialize the MongoLogger.</p> <p>Parameters:</p> Name Type Description Default <code>Logger</code> <p>The loguru logger instance to use for logging.</p> required <p>Methods:</p> Name Description <code>failed</code> <p>Log the failure of a command.</p> <code>started</code> <p>Log the start of a command.</p> <code>succeeded</code> <p>Log the success of a command.</p> Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def __init__(self, logger: loguru.Logger) -&gt; None:\n    \"\"\"\n    Initialize the MongoLogger.\n\n    Args:\n        logger: The loguru logger instance to use for logging.\n\n    \"\"\"\n    super().__init__()\n    self.logger = logger\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger(logger)","title":"<code>logger</code>","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger(logger)","title":"<code>logger</code>","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger.failed","title":"failed","text":"<pre><code>failed(event: CommandFailedEvent) -&gt; None\n</code></pre> <p>Log the failure of a command.</p> Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def failed(self, event: CommandFailedEvent) -&gt; None:\n    \"\"\"Log the failure of a command.\"\"\"\n    self.logger.debug(\n        \"Request failed\",\n        command_name=event.command_name,\n        request_id=event.request_id,\n        connection_id=event.connection_id,\n        micoseconds=event.duration_micros,\n        error=event.failure,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger.started","title":"started","text":"<pre><code>started(event: CommandStartedEvent) -&gt; None\n</code></pre> <p>Log the start of a command.</p> Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def started(self, event: monitoring.CommandStartedEvent) -&gt; None:\n    \"\"\"Log the start of a command.\"\"\"\n    self.logger.trace(\n        \"Executing request\",\n        command_name=event.command_name,\n        request_id=event.request_id,\n        connection_id=event.connection_id,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger.succeeded","title":"succeeded","text":"<pre><code>succeeded(event: CommandSucceededEvent) -&gt; None\n</code></pre> <p>Log the success of a command.</p> Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def succeeded(self, event: monitoring.CommandSucceededEvent) -&gt; None:\n    \"\"\"Log the success of a command.\"\"\"\n    self.logger.trace(\n        \"Request succeeded\",\n        command_name=event.command_name,\n        request_id=event.request_id,\n        connection_id=event.connection_id,\n        micoseconds=event.duration_micros,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging","title":"configure_logging","text":"<pre><code>configure_logging(\n    logger: Logger, settings: LogSettings\n) -&gt; None\n</code></pre> <p>Configure logging for the module.</p> <p>This function sets up the logging configuration for the module, including log level and format.</p> <p>Parameters:</p> Name Type Description Default <code>Logger</code> <p>The logger instance to configure.</p> required <code>LogSettings</code> <p>The logging settings to configure.</p> required Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def configure_logging(logger: loguru.Logger, settings: LogSettings) -&gt; None:\n    \"\"\"\n    Configure logging for the module.\n\n    This function sets up the logging configuration for the module, including\n    log level and format.\n\n    Args:\n        logger: The logger instance to configure.\n        settings: The logging settings to configure.\n\n    \"\"\"\n    logger.remove()\n\n    logger.configure(patcher=_extra_formatter, extra={\"compact\": \"\"})\n\n    if settings.stdout_enable:\n        logger.add(\n            sys.stdout,\n            level=settings.stdout_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"{message} \"\n            \"&lt;dim&gt;{extra[compact]}&lt;/dim&gt;\",\n            serialize=settings.stdout_serialize,\n            enqueue=True,\n        )\n\n    if settings.stderr_enable:\n        logger.add(\n            sys.stderr,\n            level=settings.stderr_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"{message} \"\n            \"&lt;dim&gt;{extra[compact]}&lt;/dim&gt;\",\n            serialize=settings.stderr_serialize,\n            enqueue=True,\n        )\n\n    if settings.file_enable:\n        logger.add(\n            settings.file_path,\n            level=settings.file_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"{message} \"\n            \"&lt;dim&gt;{extra[compact]}&lt;/dim&gt;\",\n            serialize=settings.file_serialize,\n            rotation=settings.file_rotation,\n            retention=settings.file_retention,\n            enqueue=True,\n        )\n\n    if settings.notification_enable:\n        manual_sender = ManualSender(settings.notification_urls)\n        logger.add(\n            manual_sender.notify,\n            level=settings.notification_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"{message} \"\n            \"&lt;dim&gt;{extra[compact]}&lt;/dim&gt;\",\n            filter={\"apprise\": False},\n            enqueue=True,\n        )\n\n    monitoring.register(MongoLogger(logger))\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging(logger)","title":"<code>logger</code>","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/base/manual_send/","title":"kamihi.base.manual_send","text":""},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send","title":"kamihi.base.manual_send","text":"<p>Module for sending alerts to notification services.</p> <p>This module provides functions for sending alerts to notification services using the Apprise library.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>ManualSender</code> <p>Class for sending alerts to notification services.</p>"},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send.ManualSender","title":"ManualSender","text":"<pre><code>ManualSender(urls: list[str])\n</code></pre> <p>               Bases: <code>Apprise</code></p> <p>Class for sending alerts to notification services.</p> <p>This class extends the Apprise library to provide a simple interface for sending alerts to various notification services using Apprise URLs.</p> <p>Manual sender.</p> <p>Parameters:</p> Name Type Description Default <code>list[str]</code> <p>List of Apprise URLs for sending alerts through notification services.</p> required Source code in <code>src/kamihi/base/manual_send.py</code> <pre><code>def __init__(self, urls: list[str]) -&gt; None:\n    \"\"\"\n    Manual sender.\n\n    Args:\n        urls: List of Apprise URLs for sending alerts through notification services.\n\n    \"\"\"\n    super().__init__()\n    self.add(urls)\n</code></pre>"},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send.ManualSender(urls)","title":"<code>urls</code>","text":""},{"location":"reference/kamihi/bot/","title":"kamihi.bot","text":""},{"location":"reference/kamihi/bot/#kamihi.bot","title":"kamihi.bot","text":"<p>Bot module for Kamihi.</p> <p>This module provides the primary interface for the Kamihi framework, allowing for the creation and management of Telegram bots.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>action</code> <p>Action helper class.</p> <code>bot</code> <p>Bot module for Kamihi.</p> <code>models</code> <p>Database models for the bot module.</p> <code>utils</code> <p>Utilities and constants for the bot module.</p> <p>Classes:</p> Name Description <code>Action</code> <p>Action class for Kamihi bot.</p> <code>Bot</code> <p>Bot class for Kamihi.</p>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action","title":"Action","text":"<pre><code>Action(\n    name: str,\n    commands: list[str],\n    description: str,\n    func: Callable,\n)\n</code></pre> <p>Action class for Kamihi bot.</p> <p>This class provides helpers for defining actions, their commands and their handlers.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>commands</code> <code>list[str]</code> <p>List of commands associated.</p> <code>description</code> <code>str</code> <p>Description of the action.</p> <p>Initialize the Action class.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the action.</p> required <code>list[str]</code> <p>List of commands associated.</p> required <code>str</code> <p>Description of the action.</p> required <code>Callable</code> <p>The function to be executed when the action is called.</p> required <p>Methods:</p> Name Description <code>clean_up</code> <p>Clean up the action from the database.</p> <code>is_valid</code> <p>Check if the action is valid.</p> <code>save_to_db</code> <p>Save the action to the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def __init__(self, name: str, commands: list[str], description: str, func: Callable) -&gt; None:\n    \"\"\"\n    Initialize the Action class.\n\n    Args:\n        name (str): The name of the action.\n        commands (list[str]): List of commands associated.\n        description (str): Description of the action.\n        func (Callable): The function to be executed when the action is called.\n\n    \"\"\"\n    self.name = name\n    self.commands = commands\n    self.description = description\n\n    self._func = func\n    self._logger = logger.bind(action=self.name)\n\n    self._validate_commands()\n    self._validate_function()\n\n    if self.is_valid():\n        self._db_object = self.save_to_db()\n        self._logger.debug(\"Successfully registered\")\n    else:\n        self._db_object = None\n        self._logger.warning(\"Failed to register\")\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action(name)","title":"<code>name</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Action(commands)","title":"<code>commands</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Action(description)","title":"<code>description</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Action(func)","title":"<code>func</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Action.handler","title":"handler  <code>property</code>","text":"<pre><code>handler: AuthHandler\n</code></pre> <p>Construct a CommandHandler for the action.</p>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action.clean_up","title":"clean_up  <code>classmethod</code>","text":"<pre><code>clean_up(keep: list[str]) -&gt; None\n</code></pre> <p>Clean up the action from the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>@classmethod\ndef clean_up(cls, keep: list[str]) -&gt; None:\n    \"\"\"Clean up the action from the database.\"\"\"\n    RegisteredAction.objects(name__nin=keep).delete()\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action.is_valid","title":"is_valid","text":"<pre><code>is_valid() -&gt; bool\n</code></pre> <p>Check if the action is valid.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def is_valid(self) -&gt; bool:\n    \"\"\"Check if the action is valid.\"\"\"\n    return self._valid\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action.save_to_db","title":"save_to_db","text":"<pre><code>save_to_db() -&gt; RegisteredAction\n</code></pre> <p>Save the action to the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def save_to_db(self) -&gt; RegisteredAction:\n    \"\"\"Save the action to the database.\"\"\"\n    return RegisteredAction.objects(name=self.name).upsert_one(\n        name=self.name,\n        description=self.description,\n    )\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot","title":"Bot","text":"<pre><code>Bot(settings: KamihiSettings)\n</code></pre> <p>Bot class for Kamihi.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>KamihiSettings</code> <p>The settings for the bot.</p> <code>templates</code> <code>Templates</code> <p>The templates loaded by the bot.</p> <p>Initialize the Bot class.</p> <p>Parameters:</p> Name Type Description Default <code>KamihiSettings</code> <p>The settings for the bot.</p> required <p>Methods:</p> Name Description <code>action</code> <p>Register an action with the bot.</p> <code>start</code> <p>Start the bot.</p> <code>user_class</code> <p>Set the user model for the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def __init__(self, settings: KamihiSettings) -&gt; None:\n    \"\"\"\n    Initialize the Bot class.\n\n    Args:\n        settings: The settings for the bot.\n\n    \"\"\"\n    self.settings = settings\n\n    # Connects to the database\n    connect(self.settings.db)\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.action","title":"action","text":"<pre><code>action(\n    *commands: str, description: str = None\n) -&gt; partial[Action]\n</code></pre> <p>Register an action with the bot.</p> <p>This method overloads the <code>bot.action</code> method so the decorator can be used with or without parentheses.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>A list of command names. If not provided, the function name will be used.</p> <code>()</code> <code>str</code> <p>A description of the action. This will be used in the help message.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>partial[Action]</code> <p>The wrapped function.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>@dispatch([str])\ndef action(self, *commands: str, description: str = None) -&gt; partial[Action]:\n    \"\"\"\n    Register an action with the bot.\n\n    This method overloads the `bot.action` method so the decorator can be used\n    with or without parentheses.\n\n    Args:\n        *commands: A list of command names. If not provided, the function name will be used.\n        description: A description of the action. This will be used in the help message.\n\n    Returns:\n        Callable: The wrapped function.\n\n    \"\"\"\n    return functools.partial(self.action, *commands, description=description)\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.action(*commands)","title":"<code>*commands</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.action(description)","title":"<code>description</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the bot.\"\"\"\n    # Cleans up the database of actions that are not present in code\n    Action.clean_up([action.name for action in self._actions])\n    logger.debug(\"Removed actions not present in code from database\")\n\n    # Warns the user if there are no valid actions registered\n    if not self._valid_actions:\n        logger.warning(\"No valid actions were registered. The bot will not respond to any commands.\")\n\n    # Loads the Telegram client\n    self._client = TelegramClient(self.settings, self._handlers)\n    logger.trace(\"Initialized Telegram client\")\n\n    # Sets the command scopes for the bot\n    self._client.register_run_once_job(self._reset_scopes, 1)\n    self._client.register_run_once_job(self._set_scopes, 2)\n    logger.trace(\"Initialized command scopes jobs\")\n\n    # Loads the web server\n    self._web = KamihiWeb(\n        self.settings.web,\n        self.settings.db,\n        {\n            \"after_create\": [self._set_scopes],\n            \"after_edit\": [self._set_scopes],\n            \"after_delete\": [self._set_scopes],\n        },\n    )\n    logger.trace(\"Initialized web server\")\n    self._web.start()\n\n    # Loads the template engine\n    self.templates = Templates(self.settings.autoreload_templates)\n    logger.trace(\"Initialized templating engine\")\n\n    # Runs the client\n    self._client.run()\n\n    # When the client is stopped, stop the database connection\n    disconnect()\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.user_class","title":"user_class","text":"<pre><code>user_class(cls: type[User]) -&gt; None\n</code></pre> <p>Set the user model for the bot.</p> <p>This method is used as a decorator to set the user model for the bot.</p> <p>Parameters:</p> Name Type Description Default <code>type[User]</code> <p>The user class to set.</p> required Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def user_class(self, cls: type[User]) -&gt; None:  # skipcq: PYL-R0201\n    \"\"\"\n    Set the user model for the bot.\n\n    This method is used as a decorator to set the user model for the bot.\n\n    Args:\n        cls: The user class to set.\n\n    \"\"\"\n    User.set_model(cls)\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.user_class(cls)","title":"<code>cls</code>","text":""},{"location":"reference/kamihi/bot/action/","title":"kamihi.bot.action","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action","title":"kamihi.bot.action","text":"<p>Action helper class.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>Action</code> <p>Action class for Kamihi bot.</p>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action","title":"Action","text":"<pre><code>Action(\n    name: str,\n    commands: list[str],\n    description: str,\n    func: Callable,\n)\n</code></pre> <p>Action class for Kamihi bot.</p> <p>This class provides helpers for defining actions, their commands and their handlers.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>commands</code> <code>list[str]</code> <p>List of commands associated.</p> <code>description</code> <code>str</code> <p>Description of the action.</p> <p>Initialize the Action class.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the action.</p> required <code>list[str]</code> <p>List of commands associated.</p> required <code>str</code> <p>Description of the action.</p> required <code>Callable</code> <p>The function to be executed when the action is called.</p> required <p>Methods:</p> Name Description <code>clean_up</code> <p>Clean up the action from the database.</p> <code>is_valid</code> <p>Check if the action is valid.</p> <code>save_to_db</code> <p>Save the action to the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def __init__(self, name: str, commands: list[str], description: str, func: Callable) -&gt; None:\n    \"\"\"\n    Initialize the Action class.\n\n    Args:\n        name (str): The name of the action.\n        commands (list[str]): List of commands associated.\n        description (str): Description of the action.\n        func (Callable): The function to be executed when the action is called.\n\n    \"\"\"\n    self.name = name\n    self.commands = commands\n    self.description = description\n\n    self._func = func\n    self._logger = logger.bind(action=self.name)\n\n    self._validate_commands()\n    self._validate_function()\n\n    if self.is_valid():\n        self._db_object = self.save_to_db()\n        self._logger.debug(\"Successfully registered\")\n    else:\n        self._db_object = None\n        self._logger.warning(\"Failed to register\")\n</code></pre>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action(name)","title":"<code>name</code>","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action(commands)","title":"<code>commands</code>","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action(description)","title":"<code>description</code>","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action(func)","title":"<code>func</code>","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action.handler","title":"handler  <code>property</code>","text":"<pre><code>handler: AuthHandler\n</code></pre> <p>Construct a CommandHandler for the action.</p>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action.clean_up","title":"clean_up  <code>classmethod</code>","text":"<pre><code>clean_up(keep: list[str]) -&gt; None\n</code></pre> <p>Clean up the action from the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>@classmethod\ndef clean_up(cls, keep: list[str]) -&gt; None:\n    \"\"\"Clean up the action from the database.\"\"\"\n    RegisteredAction.objects(name__nin=keep).delete()\n</code></pre>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action.is_valid","title":"is_valid","text":"<pre><code>is_valid() -&gt; bool\n</code></pre> <p>Check if the action is valid.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def is_valid(self) -&gt; bool:\n    \"\"\"Check if the action is valid.\"\"\"\n    return self._valid\n</code></pre>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action.save_to_db","title":"save_to_db","text":"<pre><code>save_to_db() -&gt; RegisteredAction\n</code></pre> <p>Save the action to the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def save_to_db(self) -&gt; RegisteredAction:\n    \"\"\"Save the action to the database.\"\"\"\n    return RegisteredAction.objects(name=self.name).upsert_one(\n        name=self.name,\n        description=self.description,\n    )\n</code></pre>"},{"location":"reference/kamihi/bot/bot/","title":"kamihi.bot.bot","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot","title":"kamihi.bot.bot","text":"<p>Bot module for Kamihi.</p> <p>This module provides the primary interface for the Kamihi framework, allowing for the creation and management of Telegram bots.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi import bot\n&gt;&gt;&gt; bot.start()\n</code></pre> <p>Classes:</p> Name Description <code>Bot</code> <p>Bot class for Kamihi.</p>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot","title":"Bot","text":"<pre><code>Bot(settings: KamihiSettings)\n</code></pre> <p>Bot class for Kamihi.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>KamihiSettings</code> <p>The settings for the bot.</p> <code>templates</code> <code>Templates</code> <p>The templates loaded by the bot.</p> <p>Initialize the Bot class.</p> <p>Parameters:</p> Name Type Description Default <code>KamihiSettings</code> <p>The settings for the bot.</p> required <p>Methods:</p> Name Description <code>action</code> <p>Register an action with the bot.</p> <code>start</code> <p>Start the bot.</p> <code>user_class</code> <p>Set the user model for the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def __init__(self, settings: KamihiSettings) -&gt; None:\n    \"\"\"\n    Initialize the Bot class.\n\n    Args:\n        settings: The settings for the bot.\n\n    \"\"\"\n    self.settings = settings\n\n    # Connects to the database\n    connect(self.settings.db)\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.action","title":"action","text":"<pre><code>action(\n    *commands: str, description: str = None\n) -&gt; partial[Action]\n</code></pre> <p>Register an action with the bot.</p> <p>This method overloads the <code>bot.action</code> method so the decorator can be used with or without parentheses.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>A list of command names. If not provided, the function name will be used.</p> <code>()</code> <code>str</code> <p>A description of the action. This will be used in the help message.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>partial[Action]</code> <p>The wrapped function.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>@dispatch([str])\ndef action(self, *commands: str, description: str = None) -&gt; partial[Action]:\n    \"\"\"\n    Register an action with the bot.\n\n    This method overloads the `bot.action` method so the decorator can be used\n    with or without parentheses.\n\n    Args:\n        *commands: A list of command names. If not provided, the function name will be used.\n        description: A description of the action. This will be used in the help message.\n\n    Returns:\n        Callable: The wrapped function.\n\n    \"\"\"\n    return functools.partial(self.action, *commands, description=description)\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.action(*commands)","title":"<code>*commands</code>","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.action(description)","title":"<code>description</code>","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the bot.\"\"\"\n    # Cleans up the database of actions that are not present in code\n    Action.clean_up([action.name for action in self._actions])\n    logger.debug(\"Removed actions not present in code from database\")\n\n    # Warns the user if there are no valid actions registered\n    if not self._valid_actions:\n        logger.warning(\"No valid actions were registered. The bot will not respond to any commands.\")\n\n    # Loads the Telegram client\n    self._client = TelegramClient(self.settings, self._handlers)\n    logger.trace(\"Initialized Telegram client\")\n\n    # Sets the command scopes for the bot\n    self._client.register_run_once_job(self._reset_scopes, 1)\n    self._client.register_run_once_job(self._set_scopes, 2)\n    logger.trace(\"Initialized command scopes jobs\")\n\n    # Loads the web server\n    self._web = KamihiWeb(\n        self.settings.web,\n        self.settings.db,\n        {\n            \"after_create\": [self._set_scopes],\n            \"after_edit\": [self._set_scopes],\n            \"after_delete\": [self._set_scopes],\n        },\n    )\n    logger.trace(\"Initialized web server\")\n    self._web.start()\n\n    # Loads the template engine\n    self.templates = Templates(self.settings.autoreload_templates)\n    logger.trace(\"Initialized templating engine\")\n\n    # Runs the client\n    self._client.run()\n\n    # When the client is stopped, stop the database connection\n    disconnect()\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.user_class","title":"user_class","text":"<pre><code>user_class(cls: type[User]) -&gt; None\n</code></pre> <p>Set the user model for the bot.</p> <p>This method is used as a decorator to set the user model for the bot.</p> <p>Parameters:</p> Name Type Description Default <code>type[User]</code> <p>The user class to set.</p> required Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def user_class(self, cls: type[User]) -&gt; None:  # skipcq: PYL-R0201\n    \"\"\"\n    Set the user model for the bot.\n\n    This method is used as a decorator to set the user model for the bot.\n\n    Args:\n        cls: The user class to set.\n\n    \"\"\"\n    User.set_model(cls)\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.user_class(cls)","title":"<code>cls</code>","text":""},{"location":"reference/kamihi/bot/models/","title":"kamihi.bot.models","text":""},{"location":"reference/kamihi/bot/models/#kamihi.bot.models","title":"kamihi.bot.models","text":"<p>Database models for the bot module.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>registered_action</code> <p>RegisteredAction model.</p> <p>Classes:</p> Name Description <code>RegisteredAction</code> <p>RegisteredAction model.</p>"},{"location":"reference/kamihi/bot/models/#kamihi.bot.models.RegisteredAction","title":"RegisteredAction","text":"<p>               Bases: <code>Document</code></p> <p>RegisteredAction model.</p> <p>This model represents an action that is registered in the system. It is used to manage user actions and their associated data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>description</code> <code>str</code> <p>A description of the action.</p>"},{"location":"reference/kamihi/bot/models/registered_action/","title":"kamihi.bot.models.registered_action","text":""},{"location":"reference/kamihi/bot/models/registered_action/#kamihi.bot.models.registered_action","title":"kamihi.bot.models.registered_action","text":"<p>RegisteredAction model.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>RegisteredAction</code> <p>RegisteredAction model.</p>"},{"location":"reference/kamihi/bot/models/registered_action/#kamihi.bot.models.registered_action.RegisteredAction","title":"RegisteredAction","text":"<p>               Bases: <code>Document</code></p> <p>RegisteredAction model.</p> <p>This model represents an action that is registered in the system. It is used to manage user actions and their associated data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>description</code> <code>str</code> <p>A description of the action.</p>"},{"location":"reference/kamihi/bot/utils/","title":"kamihi.bot.utils","text":""},{"location":"reference/kamihi/bot/utils/#kamihi.bot.utils","title":"kamihi.bot.utils","text":"<p>Utilities and constants for the bot module.</p> License <p>MIT</p> <p>Attributes:</p> Name Type Description <code>COMMAND_REGEX</code> <code>Pattern</code> <p>Regular expression pattern for validating command names.</p>"},{"location":"reference/kamihi/db/","title":"kamihi.db","text":""},{"location":"reference/kamihi/db/#kamihi.db","title":"kamihi.db","text":"<p>Database connections module for the Kamihi framework.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>mongo</code> <p>Connection management to MongoDB using MongoEngine.</p>"},{"location":"reference/kamihi/db/mongo/","title":"kamihi.db.mongo","text":""},{"location":"reference/kamihi/db/mongo/#kamihi.db.mongo","title":"kamihi.db.mongo","text":"<p>Connection management to MongoDB using MongoEngine.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>connect</code> <p>Connect to the MongoDB database.</p> <code>disconnect</code> <p>Disconnect from the MongoDB database.</p>"},{"location":"reference/kamihi/db/mongo/#kamihi.db.mongo.connect","title":"connect","text":"<pre><code>connect(settings: DatabaseSettings) -&gt; None\n</code></pre> <p>Connect to the MongoDB database.</p> <p>This function establishes a connection to the MongoDB database using the configuration settings defined in the Kamihi settings module.</p> <p>Parameters:</p> Name Type Description Default <code>DatabaseSettings</code> <p>The database settings for the connection</p> required Source code in <code>src/kamihi/db/mongo.py</code> <pre><code>def connect(settings: DatabaseSettings) -&gt; None:\n    \"\"\"\n    Connect to the MongoDB database.\n\n    This function establishes a connection to the MongoDB database using the\n    configuration settings defined in the Kamihi settings module.\n\n    Args:\n        settings (DatabaseSettings): The database settings for the connection\n\n    \"\"\"\n    mongo_connect(\n        host=settings.host + \"/\" + settings.name,\n        alias=\"default\",\n    )\n</code></pre>"},{"location":"reference/kamihi/db/mongo/#kamihi.db.mongo.connect(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/db/mongo/#kamihi.db.mongo.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre> <p>Disconnect from the MongoDB database.</p> Source code in <code>src/kamihi/db/mongo.py</code> <pre><code>def disconnect() -&gt; None:\n    \"\"\"Disconnect from the MongoDB database.\"\"\"\n    mongo_disconnect(alias=\"default\")\n</code></pre>"},{"location":"reference/kamihi/templates/","title":"kamihi.templates","text":""},{"location":"reference/kamihi/templates/#kamihi.templates","title":"kamihi.templates","text":"<p>Template module for Kamihi.</p> <p>This module provides the Templates class, which is responsible for loading and rendering templates using Jinja2. The class allows for the addition of directories and files to the template loaders, enabling dynamic loading of templates at runtime.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi.templates import Templates\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; tmps = Templates()\n&gt;&gt;&gt; tmps.add_directory(\"example_action\", Path(\"/path/to/templates\"))\n&gt;&gt;&gt; tmps.load()\n&gt;&gt;&gt; rendered_template = tmps.render(\"example_action/template_name.md\", context={\"key\": \"value\"})\n</code></pre> <p>Modules:</p> Name Description <code>templates</code> <p>Templates module for Kamihi.</p> <p>Classes:</p> Name Description <code>Templates</code> <p>Templates class for Kamihi.</p>"},{"location":"reference/kamihi/templates/#kamihi.templates.Templates","title":"Templates","text":"<pre><code>Templates(autoreload: bool = True)\n</code></pre> <p>Templates class for Kamihi.</p> <p>This class is responsible for loading and rendering templates using Jinja2.</p> <p>Attributes:</p> Name Type Description <code>autoreload</code> <code>bool</code> <p>Whether to enable auto-reloading of templates.</p> <p>Initialize the Templates class.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Whether to enable auto-reloading of templates.</p> <code>True</code> <p>Methods:</p> Name Description <code>add_directory</code> <p>Add a directory to the template loaders.</p> <code>add_file</code> <p>Add a file to the template loaders.</p> <code>load</code> <p>Load the templates.</p> <code>render</code> <p>Render a template with the given name and context.</p> Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def __init__(self, autoreload: bool = True) -&gt; None:  # noqa: FBT001, FBT002\n    \"\"\"\n    Initialize the Templates class.\n\n    Args:\n        autoreload: Whether to enable auto-reloading of templates.\n\n    \"\"\"\n    self.autoreload = autoreload\n    self._loaders = {}\n    self._env = None\n</code></pre>"},{"location":"reference/kamihi/templates/#kamihi.templates.Templates(autoreload)","title":"<code>autoreload</code>","text":""},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.add_directory","title":"add_directory","text":"<pre><code>add_directory(action_name: str, path: Path) -&gt; None\n</code></pre> <p>Add a directory to the template loaders.</p> <p>This method allows you to add a directory containing templates to the template loaders. The templates in this directory will be loaded when the load() method is called.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the action to associate with the templates.</p> required <code>Path</code> <p>The path to the directory containing the templates.</p> required Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def add_directory(self, action_name: str, path: Path) -&gt; None:\n    \"\"\"\n    Add a directory to the template loaders.\n\n    This method allows you to add a directory containing templates to the\n    template loaders. The templates in this directory will be loaded when\n    the load() method is called.\n\n    Args:\n        action_name: The name of the action to associate with the templates.\n        path: The path to the directory containing the templates.\n\n    \"\"\"\n    if self._env is not None:\n        raise RuntimeError(self._error_already_loaded)\n    if action_name not in self._loaders:\n        self._loaders[action_name] = []\n    self._loaders[action_name].append(FileSystemLoader(path))\n</code></pre>"},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.add_directory(action_name)","title":"<code>action_name</code>","text":""},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.add_directory(path)","title":"<code>path</code>","text":""},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.add_file","title":"add_file","text":"<pre><code>add_file(action_name: str, path: Path) -&gt; None\n</code></pre> <p>Add a file to the template loaders.</p> <p>This method allows you to add a single file to the template loaders. The file will be loaded when the load() method is called. This is useful for loading templates that are not in a directory.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the action to associate with the template.</p> required <code>Path</code> <p>The path to the file containing the template.</p> required Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def add_file(self, action_name: str, path: Path) -&gt; None:\n    \"\"\"\n    Add a file to the template loaders.\n\n    This method allows you to add a single file to the template loaders.\n    The file will be loaded when the load() method is called.\n    This is useful for loading templates that are not in a directory.\n\n    Args:\n        action_name: The name of the action to associate with the template.\n        path: The path to the file containing the template.\n\n    \"\"\"\n    if self._env is not None:\n        raise RuntimeError(self._error_already_loaded)\n    if action_name not in self._loaders:\n        self._loaders[action_name] = []\n    self._loaders[action_name].append(DictLoader({path.name: path.read_text()}))\n</code></pre>"},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.add_file(action_name)","title":"<code>action_name</code>","text":""},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.add_file(path)","title":"<code>path</code>","text":""},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.load","title":"load","text":"<pre><code>load() -&gt; None\n</code></pre> <p>Load the templates.</p> <p>This method initializes the Jinja2 environment and loads the templates from the specified loaders. It should be called after adding all the directories and files to the template loaders.</p> Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def load(self) -&gt; None:\n    \"\"\"\n    Load the templates.\n\n    This method initializes the Jinja2 environment and loads the templates\n    from the specified loaders. It should be called after adding all the\n    directories and files to the template loaders.\n    \"\"\"\n    self._env = Environment(\n        loader=PrefixLoader({name: ChoiceLoader(loaders) for name, loaders in self._loaders.items()}),\n        auto_reload=self.autoreload,\n        autoescape=select_autoescape(default_for_string=False),\n    )\n</code></pre>"},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.render","title":"render","text":"<pre><code>render(template_name: str, **kwargs) -&gt; str\n</code></pre> <p>Render a template with the given name and context.</p> <p>This method renders a template with the specified name using the provided keyword arguments as context. It requires that the templates have been loaded using the load() method before calling this method.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the template to render.</p> required <p>Additional keyword arguments to pass to the template.</p> <code>{}</code> Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def render(self, template_name: str, **kwargs) -&gt; str:  # noqa: ANN003\n    \"\"\"\n    Render a template with the given name and context.\n\n    This method renders a template with the specified name using the\n    provided keyword arguments as context. It requires that the templates\n    have been loaded using the load() method before calling this method.\n\n    Args:\n        template_name: The name of the template to render.\n        **kwargs: Additional keyword arguments to pass to the template.\n\n    \"\"\"\n    if self._env is None:\n        raise RuntimeError(self._error_not_loaded)\n    template = self._env.get_template(template_name)\n    return template.render(**kwargs)\n</code></pre>"},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.render(template_name)","title":"<code>template_name</code>","text":""},{"location":"reference/kamihi/templates/#kamihi.templates.Templates.render(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"reference/kamihi/templates/templates/","title":"kamihi.templates.templates","text":""},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates","title":"kamihi.templates.templates","text":"<p>Templates module for Kamihi.</p> <p>This module provides templating functionality for the Kamihi framework, allowing for loading and rendering templates using Jinja2. It supports loading templates from directories or individual files and organizing them under different action names for easy access.</p> <p>The main component is the Templates class, which handles template loading, configuration, and rendering with proper error handling for common usage patterns.</p> <p>License: MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from kamihi.templates import Templates\n&gt;&gt;&gt; templates = Templates()\n&gt;&gt;&gt; templates.add_directory(\"notifications\", Path(\"templates/notifications\"))\n&gt;&gt;&gt; templates.load()\n&gt;&gt;&gt; content = templates.render(\"notifications/welcome.md\", name=\"User\")\n</code></pre> <p>Classes:</p> Name Description <code>Templates</code> <p>Templates class for Kamihi.</p>"},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates","title":"Templates","text":"<pre><code>Templates(autoreload: bool = True)\n</code></pre> <p>Templates class for Kamihi.</p> <p>This class is responsible for loading and rendering templates using Jinja2.</p> <p>Attributes:</p> Name Type Description <code>autoreload</code> <code>bool</code> <p>Whether to enable auto-reloading of templates.</p> <p>Initialize the Templates class.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Whether to enable auto-reloading of templates.</p> <code>True</code> <p>Methods:</p> Name Description <code>add_directory</code> <p>Add a directory to the template loaders.</p> <code>add_file</code> <p>Add a file to the template loaders.</p> <code>load</code> <p>Load the templates.</p> <code>render</code> <p>Render a template with the given name and context.</p> Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def __init__(self, autoreload: bool = True) -&gt; None:  # noqa: FBT001, FBT002\n    \"\"\"\n    Initialize the Templates class.\n\n    Args:\n        autoreload: Whether to enable auto-reloading of templates.\n\n    \"\"\"\n    self.autoreload = autoreload\n    self._loaders = {}\n    self._env = None\n</code></pre>"},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates(autoreload)","title":"<code>autoreload</code>","text":""},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.add_directory","title":"add_directory","text":"<pre><code>add_directory(action_name: str, path: Path) -&gt; None\n</code></pre> <p>Add a directory to the template loaders.</p> <p>This method allows you to add a directory containing templates to the template loaders. The templates in this directory will be loaded when the load() method is called.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the action to associate with the templates.</p> required <code>Path</code> <p>The path to the directory containing the templates.</p> required Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def add_directory(self, action_name: str, path: Path) -&gt; None:\n    \"\"\"\n    Add a directory to the template loaders.\n\n    This method allows you to add a directory containing templates to the\n    template loaders. The templates in this directory will be loaded when\n    the load() method is called.\n\n    Args:\n        action_name: The name of the action to associate with the templates.\n        path: The path to the directory containing the templates.\n\n    \"\"\"\n    if self._env is not None:\n        raise RuntimeError(self._error_already_loaded)\n    if action_name not in self._loaders:\n        self._loaders[action_name] = []\n    self._loaders[action_name].append(FileSystemLoader(path))\n</code></pre>"},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.add_directory(action_name)","title":"<code>action_name</code>","text":""},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.add_directory(path)","title":"<code>path</code>","text":""},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.add_file","title":"add_file","text":"<pre><code>add_file(action_name: str, path: Path) -&gt; None\n</code></pre> <p>Add a file to the template loaders.</p> <p>This method allows you to add a single file to the template loaders. The file will be loaded when the load() method is called. This is useful for loading templates that are not in a directory.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the action to associate with the template.</p> required <code>Path</code> <p>The path to the file containing the template.</p> required Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def add_file(self, action_name: str, path: Path) -&gt; None:\n    \"\"\"\n    Add a file to the template loaders.\n\n    This method allows you to add a single file to the template loaders.\n    The file will be loaded when the load() method is called.\n    This is useful for loading templates that are not in a directory.\n\n    Args:\n        action_name: The name of the action to associate with the template.\n        path: The path to the file containing the template.\n\n    \"\"\"\n    if self._env is not None:\n        raise RuntimeError(self._error_already_loaded)\n    if action_name not in self._loaders:\n        self._loaders[action_name] = []\n    self._loaders[action_name].append(DictLoader({path.name: path.read_text()}))\n</code></pre>"},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.add_file(action_name)","title":"<code>action_name</code>","text":""},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.add_file(path)","title":"<code>path</code>","text":""},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.load","title":"load","text":"<pre><code>load() -&gt; None\n</code></pre> <p>Load the templates.</p> <p>This method initializes the Jinja2 environment and loads the templates from the specified loaders. It should be called after adding all the directories and files to the template loaders.</p> Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def load(self) -&gt; None:\n    \"\"\"\n    Load the templates.\n\n    This method initializes the Jinja2 environment and loads the templates\n    from the specified loaders. It should be called after adding all the\n    directories and files to the template loaders.\n    \"\"\"\n    self._env = Environment(\n        loader=PrefixLoader({name: ChoiceLoader(loaders) for name, loaders in self._loaders.items()}),\n        auto_reload=self.autoreload,\n        autoescape=select_autoescape(default_for_string=False),\n    )\n</code></pre>"},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.render","title":"render","text":"<pre><code>render(template_name: str, **kwargs) -&gt; str\n</code></pre> <p>Render a template with the given name and context.</p> <p>This method renders a template with the specified name using the provided keyword arguments as context. It requires that the templates have been loaded using the load() method before calling this method.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the template to render.</p> required <p>Additional keyword arguments to pass to the template.</p> <code>{}</code> Source code in <code>src/kamihi/templates/templates.py</code> <pre><code>def render(self, template_name: str, **kwargs) -&gt; str:  # noqa: ANN003\n    \"\"\"\n    Render a template with the given name and context.\n\n    This method renders a template with the specified name using the\n    provided keyword arguments as context. It requires that the templates\n    have been loaded using the load() method before calling this method.\n\n    Args:\n        template_name: The name of the template to render.\n        **kwargs: Additional keyword arguments to pass to the template.\n\n    \"\"\"\n    if self._env is None:\n        raise RuntimeError(self._error_not_loaded)\n    template = self._env.get_template(template_name)\n    return template.render(**kwargs)\n</code></pre>"},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.render(template_name)","title":"<code>template_name</code>","text":""},{"location":"reference/kamihi/templates/templates/#kamihi.templates.templates.Templates.render(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"reference/kamihi/tg/","title":"kamihi.tg","text":""},{"location":"reference/kamihi/tg/#kamihi.tg","title":"kamihi.tg","text":"<p>Telegram module for Kamihi.</p> <p>This module provides the communication with the Telegram API</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>client</code> <p>Telegram client module.</p> <code>default_handlers</code> <p>Default handlers.</p> <code>handlers</code> <p>Custom handlers for the Kamihi framework using python-telegram-bot.</p> <code>send</code> <p>Send functions for Telegram.</p> <p>Classes:</p> Name Description <code>TelegramClient</code> <p>Telegram client class.</p> <p>Functions:</p> Name Description <code>reply_text</code> <p>Reply to a message update.</p> <code>send_text</code> <p>Send a text message to a chat.</p>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient","title":"TelegramClient","text":"<pre><code>TelegramClient(\n    settings: KamihiSettings, handlers: list[BaseHandler]\n)\n</code></pre> <p>Telegram client class.</p> <p>This class provides methods to send messages and handle commands.</p> <p>Initialize the Telegram client.</p> <p>Parameters:</p> Name Type Description Default <code>KamihiSettings</code> <p>The settings object.</p> required <code>list[BaseHandler]</code> <p>List of handlers to register.</p> required <p>Methods:</p> Name Description <code>register_run_once_job</code> <p>Add a job to run once.</p> <code>reset_scopes</code> <p>Reset the command scopes for the bot.</p> <code>run</code> <p>Run the Telegram bot.</p> <code>set_scopes</code> <p>Set the command scopes for the bot.</p> <code>stop</code> <p>Stop the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def __init__(self, settings: KamihiSettings, handlers: list[BaseHandler]) -&gt; None:\n    \"\"\"\n    Initialize the Telegram client.\n\n    Args:\n        settings (KamihiSettings): The settings object.\n        handlers (list[BaseHandler]): List of handlers to register.\n\n    \"\"\"\n    self._bot_settings = settings\n\n    if self._bot_settings.testing:\n        self._base_url = \"https://api.telegram.org/bot{token}/test\"\n\n    # Set up the application with all the settings\n    self._builder = Application.builder()\n    self._builder.base_url(self._base_url)\n    self._builder.token(settings.token)\n    self._builder.defaults(\n        Defaults(\n            tzinfo=settings.timezone_obj,\n            parse_mode=ParseMode.MARKDOWN_V2,\n        )\n    )\n    self._builder.post_init(_post_init)\n    self._builder.post_shutdown(_post_shutdown)\n    self._builder.persistence(DictPersistence(bot_data_json=settings.model_dump_json()))\n\n    # Build the application\n    self._app: Application = self._builder.build()\n\n    # Register the handlers\n    for handler in handlers:\n        with logger.catch(exception=TelegramError, message=\"Failed to register handler\"):\n            self._app.add_handler(handler)\n\n    # Register the default handlers\n    if settings.responses.default_enabled:\n        self._app.add_handler(MessageHandler(filters.TEXT, default), group=1000)\n    self._app.add_error_handler(error)\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient(handlers)","title":"<code>handlers</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.register_run_once_job","title":"register_run_once_job","text":"<pre><code>register_run_once_job(\n    callback: callable, when: int\n) -&gt; None\n</code></pre> <p>Add a job to run once.</p> <p>Parameters:</p> Name Type Description Default <code>callable</code> <p>The callback function to run.</p> required <code>int</code> <p>second from now to run the job.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def register_run_once_job(self, callback: callable, when: int) -&gt; None:\n    \"\"\"\n    Add a job to run once.\n\n    Args:\n        callback (callable): The callback function to run.\n        when (int): second from now to run the job.\n\n    \"\"\"\n    self._app.job_queue.run_once(callback, when)\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.register_run_once_job(callback)","title":"<code>callback</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.register_run_once_job(when)","title":"<code>when</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.reset_scopes","title":"reset_scopes  <code>async</code>","text":"<pre><code>reset_scopes(context: CallbackContext) -&gt; None\n</code></pre> <p>Reset the command scopes for the bot.</p> <p>This method clears all command scopes and sets the default commands.</p> <p>Parameters:</p> Name Type Description Default <code>CallbackContext</code> <p>The context of the callback. Not used but required for this function to be registered as a job.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def reset_scopes(self, context: CallbackContext) -&gt; None:  # noqa: ARG002\n    \"\"\"\n    Reset the command scopes for the bot.\n\n    This method clears all command scopes and sets the default commands.\n\n    Args:\n        context (CallbackContext): The context of the callback. Not used but required for\n            this function to be registered as a job.\n\n    \"\"\"\n    if self._bot_settings.testing:\n        logger.debug(\"Testing mode, skipping resetting scopes\")\n        return\n\n    with logger.catch(exception=TelegramError, message=\"Failed to reset scopes\"):\n        await self._app.bot.set_my_commands(commands=[])\n        logger.debug(\"Scopes erased\")\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.reset_scopes(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the Telegram bot.\"\"\"\n    logger.trace(\"Starting main loop...\")\n    self._app.run_polling(allowed_updates=Update.ALL_TYPES)\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.set_scopes","title":"set_scopes  <code>async</code>","text":"<pre><code>set_scopes(scopes: dict[int, list[BotCommand]]) -&gt; None\n</code></pre> <p>Set the command scopes for the bot.</p> <p>Parameters:</p> Name Type Description Default <code>dict[int, list[BotCommand]]</code> <p>The command scopes to set.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def set_scopes(self, scopes: dict[int, list[BotCommand]]) -&gt; None:\n    \"\"\"\n    Set the command scopes for the bot.\n\n    Args:\n        scopes (dict[int, list[BotCommand]]): The command scopes to set.\n\n    \"\"\"\n    if self._bot_settings.testing:\n        logger.debug(\"Testing mode, skipping setting scopes\")\n        return\n\n    for user_id, commands in scopes.items():\n        lg = logger.bind(user_id=user_id, commands=[command.command for command in commands])\n        with lg.catch(\n            exception=TelegramError,\n            message=\"Failed to set scopes for user {user_id}\",\n        ):\n            await self._app.bot.set_my_commands(\n                commands=commands,\n                scope=BotCommandScopeChat(user_id),\n            )\n            lg.debug(\"Scopes set\")\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.set_scopes(scopes)","title":"<code>scopes</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.stop","title":"stop  <code>async</code>","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def stop(self) -&gt; None:\n    \"\"\"Stop the Telegram bot.\"\"\"\n    logger.trace(\"Stopping main loop...\")\n    await self._app.stop()\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.reply_text","title":"reply_text  <code>async</code>","text":"<pre><code>reply_text(\n    update: Update, context: CallbackContext, text: str\n) -&gt; None\n</code></pre> <p>Reply to a message update.</p> <p>Convenience method to send a text message in response to an update.</p> <p>Parameters:</p> Name Type Description Default <code>Update</code> <p>the update object</p> required <code>CallbackContext</code> <p>the context object</p> required <code>str</code> <p>the text to send</p> required Source code in <code>src/kamihi/tg/send.py</code> <pre><code>async def reply_text(update: Update, context: CallbackContext, text: str) -&gt; None:\n    \"\"\"\n    Reply to a message update.\n\n    Convenience method to send a text message in response to an update.\n\n    Args:\n        update: the update object\n        context: the context object\n        text: the text to send\n\n    \"\"\"\n    bot = context.bot\n    chat_id = update.effective_message.chat_id\n    message_id = update.effective_message.message_id\n\n    await send_text(bot, chat_id, text, message_id)\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.reply_text(update)","title":"<code>update</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.reply_text(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.reply_text(text)","title":"<code>text</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.send_text","title":"send_text  <code>async</code>","text":"<pre><code>send_text(\n    bot: Bot,\n    chat_id: int,\n    text: str,\n    reply_to_message_id: int = None,\n) -&gt; Message | None\n</code></pre> <p>Send a text message to a chat.</p> <p>Parameters:</p> Name Type Description Default <code>Bot</code> <p>The Telegram Bot instance.</p> required <code>int</code> <p>The ID of the chat to send the message to.</p> required <code>str</code> <p>The text of the message.</p> required <code>int</code> <p>The ID of the message to reply to. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Message | None</code> <p>Message | None: The response from the Telegram API, or None if an error occurs.</p> Source code in <code>src/kamihi/tg/send.py</code> <pre><code>async def send_text(\n    bot: Bot,\n    chat_id: int,\n    text: str,\n    reply_to_message_id: int = None,\n) -&gt; Message | None:\n    \"\"\"\n    Send a text message to a chat.\n\n    Args:\n        bot (Bot): The Telegram Bot instance.\n        chat_id (int): The ID of the chat to send the message to.\n        text (str): The text of the message.\n        reply_to_message_id (int, optional): The ID of the message to reply to. Defaults to None.\n\n    Returns:\n        Message | None: The response from the Telegram API, or None if an error occurs.\n\n    \"\"\"\n    lg = logger.bind(chat_id=chat_id, received_id=reply_to_message_id, response_text=text)\n\n    with lg.catch(exception=TelegramError, message=\"Failed to send message\"):\n        reply = await bot.send_message(\n            chat_id,\n            md(text),\n            reply_to_message_id=reply_to_message_id,\n        )\n        lg.bind(response_id=reply.message_id).debug(\"Reply sent\" if reply_to_message_id else \"Message sent\")\n        return reply\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.send_text(bot)","title":"<code>bot</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.send_text(chat_id)","title":"<code>chat_id</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.send_text(text)","title":"<code>text</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.send_text(reply_to_message_id)","title":"<code>reply_to_message_id</code>","text":""},{"location":"reference/kamihi/tg/client/","title":"kamihi.tg.client","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client","title":"kamihi.tg.client","text":"<p>Telegram client module.</p> <p>This module provides a Telegram client for sending messages and handling commands.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi.tg.client import TelegramClient\n&gt;&gt;&gt; from kamihi.base.config import KamihiSettings\n&gt;&gt;&gt; client = TelegramClient(KamihiSettings(), [])\n&gt;&gt;&gt; client.run()\n</code></pre> <p>Classes:</p> Name Description <code>TelegramClient</code> <p>Telegram client class.</p>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient","title":"TelegramClient","text":"<pre><code>TelegramClient(\n    settings: KamihiSettings, handlers: list[BaseHandler]\n)\n</code></pre> <p>Telegram client class.</p> <p>This class provides methods to send messages and handle commands.</p> <p>Initialize the Telegram client.</p> <p>Parameters:</p> Name Type Description Default <code>KamihiSettings</code> <p>The settings object.</p> required <code>list[BaseHandler]</code> <p>List of handlers to register.</p> required <p>Methods:</p> Name Description <code>register_run_once_job</code> <p>Add a job to run once.</p> <code>reset_scopes</code> <p>Reset the command scopes for the bot.</p> <code>run</code> <p>Run the Telegram bot.</p> <code>set_scopes</code> <p>Set the command scopes for the bot.</p> <code>stop</code> <p>Stop the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def __init__(self, settings: KamihiSettings, handlers: list[BaseHandler]) -&gt; None:\n    \"\"\"\n    Initialize the Telegram client.\n\n    Args:\n        settings (KamihiSettings): The settings object.\n        handlers (list[BaseHandler]): List of handlers to register.\n\n    \"\"\"\n    self._bot_settings = settings\n\n    if self._bot_settings.testing:\n        self._base_url = \"https://api.telegram.org/bot{token}/test\"\n\n    # Set up the application with all the settings\n    self._builder = Application.builder()\n    self._builder.base_url(self._base_url)\n    self._builder.token(settings.token)\n    self._builder.defaults(\n        Defaults(\n            tzinfo=settings.timezone_obj,\n            parse_mode=ParseMode.MARKDOWN_V2,\n        )\n    )\n    self._builder.post_init(_post_init)\n    self._builder.post_shutdown(_post_shutdown)\n    self._builder.persistence(DictPersistence(bot_data_json=settings.model_dump_json()))\n\n    # Build the application\n    self._app: Application = self._builder.build()\n\n    # Register the handlers\n    for handler in handlers:\n        with logger.catch(exception=TelegramError, message=\"Failed to register handler\"):\n            self._app.add_handler(handler)\n\n    # Register the default handlers\n    if settings.responses.default_enabled:\n        self._app.add_handler(MessageHandler(filters.TEXT, default), group=1000)\n    self._app.add_error_handler(error)\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient(handlers)","title":"<code>handlers</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.register_run_once_job","title":"register_run_once_job","text":"<pre><code>register_run_once_job(\n    callback: callable, when: int\n) -&gt; None\n</code></pre> <p>Add a job to run once.</p> <p>Parameters:</p> Name Type Description Default <code>callable</code> <p>The callback function to run.</p> required <code>int</code> <p>second from now to run the job.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def register_run_once_job(self, callback: callable, when: int) -&gt; None:\n    \"\"\"\n    Add a job to run once.\n\n    Args:\n        callback (callable): The callback function to run.\n        when (int): second from now to run the job.\n\n    \"\"\"\n    self._app.job_queue.run_once(callback, when)\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.register_run_once_job(callback)","title":"<code>callback</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.register_run_once_job(when)","title":"<code>when</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.reset_scopes","title":"reset_scopes  <code>async</code>","text":"<pre><code>reset_scopes(context: CallbackContext) -&gt; None\n</code></pre> <p>Reset the command scopes for the bot.</p> <p>This method clears all command scopes and sets the default commands.</p> <p>Parameters:</p> Name Type Description Default <code>CallbackContext</code> <p>The context of the callback. Not used but required for this function to be registered as a job.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def reset_scopes(self, context: CallbackContext) -&gt; None:  # noqa: ARG002\n    \"\"\"\n    Reset the command scopes for the bot.\n\n    This method clears all command scopes and sets the default commands.\n\n    Args:\n        context (CallbackContext): The context of the callback. Not used but required for\n            this function to be registered as a job.\n\n    \"\"\"\n    if self._bot_settings.testing:\n        logger.debug(\"Testing mode, skipping resetting scopes\")\n        return\n\n    with logger.catch(exception=TelegramError, message=\"Failed to reset scopes\"):\n        await self._app.bot.set_my_commands(commands=[])\n        logger.debug(\"Scopes erased\")\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.reset_scopes(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the Telegram bot.\"\"\"\n    logger.trace(\"Starting main loop...\")\n    self._app.run_polling(allowed_updates=Update.ALL_TYPES)\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.set_scopes","title":"set_scopes  <code>async</code>","text":"<pre><code>set_scopes(scopes: dict[int, list[BotCommand]]) -&gt; None\n</code></pre> <p>Set the command scopes for the bot.</p> <p>Parameters:</p> Name Type Description Default <code>dict[int, list[BotCommand]]</code> <p>The command scopes to set.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def set_scopes(self, scopes: dict[int, list[BotCommand]]) -&gt; None:\n    \"\"\"\n    Set the command scopes for the bot.\n\n    Args:\n        scopes (dict[int, list[BotCommand]]): The command scopes to set.\n\n    \"\"\"\n    if self._bot_settings.testing:\n        logger.debug(\"Testing mode, skipping setting scopes\")\n        return\n\n    for user_id, commands in scopes.items():\n        lg = logger.bind(user_id=user_id, commands=[command.command for command in commands])\n        with lg.catch(\n            exception=TelegramError,\n            message=\"Failed to set scopes for user {user_id}\",\n        ):\n            await self._app.bot.set_my_commands(\n                commands=commands,\n                scope=BotCommandScopeChat(user_id),\n            )\n            lg.debug(\"Scopes set\")\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.set_scopes(scopes)","title":"<code>scopes</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.stop","title":"stop  <code>async</code>","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def stop(self) -&gt; None:\n    \"\"\"Stop the Telegram bot.\"\"\"\n    logger.trace(\"Stopping main loop...\")\n    await self._app.stop()\n</code></pre>"},{"location":"reference/kamihi/tg/default_handlers/","title":"kamihi.tg.default_handlers","text":""},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers","title":"kamihi.tg.default_handlers","text":"<p>Default handlers.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>default</code> <p>Tells the user their message is not understood.</p> <code>error</code> <p>Apologizes to the user when an error happens.</p>"},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.default","title":"default  <code>async</code>","text":"<pre><code>default(update: Update, context: CallbackContext) -&gt; None\n</code></pre> <p>Tells the user their message is not understood.</p> <p>Parameters:</p> Name Type Description Default <code>Update</code> <p>Update object</p> required <code>CallbackContext</code> <p>CallbackContext object</p> required Source code in <code>src/kamihi/tg/default_handlers.py</code> <pre><code>async def default(update: Update, context: CallbackContext) -&gt; None:\n    \"\"\"\n    Tells the user their message is not understood.\n\n    Args:\n        update (Update): Update object\n        context (CallbackContext): CallbackContext object\n\n    \"\"\"\n    logger.bind(chat_id=update.effective_message.chat_id, message_id=update.effective_message.message_id).debug(\n        \"Received message but no handler matched, so sending default response\"\n    )\n\n    text = context.bot_data[\"responses\"][\"default_message\"]\n    await reply_text(update, context, text)\n</code></pre>"},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.default(update)","title":"<code>update</code>","text":""},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.default(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.error","title":"error  <code>async</code>","text":"<pre><code>error(\n    update: object | None, context: CallbackContext\n) -&gt; None\n</code></pre> <p>Apologizes to the user when an error happens.</p> <p>Parameters:</p> Name Type Description Default <code>Update</code> <p>Update object</p> required <code>CallbackContext</code> <p>CallbackContext object</p> required Source code in <code>src/kamihi/tg/default_handlers.py</code> <pre><code>async def error(update: object | None, context: CallbackContext) -&gt; None:\n    \"\"\"\n    Apologizes to the user when an error happens.\n\n    Args:\n        update (Update): Update object\n        context (CallbackContext): CallbackContext object\n\n    \"\"\"\n    logger.opt(exception=context.error).error(\"An error occurred\")\n\n    if isinstance(update, Update):\n        text = context.bot_data[\"responses\"][\"error_message\"]\n        await reply_text(update, context, text)\n</code></pre>"},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.error(update)","title":"<code>update</code>","text":""},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.error(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/handlers/","title":"kamihi.tg.handlers","text":""},{"location":"reference/kamihi/tg/handlers/#kamihi.tg.handlers","title":"kamihi.tg.handlers","text":"<p>Custom handlers for the Kamihi framework using python-telegram-bot.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>auth_handler</code> <p>Custom handler for Telegram bot that checks if a user is authorized to use a wrapped handler.</p> <p>Classes:</p> Name Description <code>AuthHandler</code> <p>Custom wrapper handler that checks if the user is authorized to use the wrapped handler before executing it.</p>"},{"location":"reference/kamihi/tg/handlers/#kamihi.tg.handlers.AuthHandler","title":"AuthHandler","text":"<pre><code>AuthHandler(handler: BaseHandler, name: str)\n</code></pre> <p>               Bases: <code>BaseHandler</code></p> <p>Custom wrapper handler that checks if the user is authorized to use the wrapped handler before executing it.</p> <p>Attributes:</p> Name Type Description <code>handler</code> <code>BaseHandler</code> <p>the handler to be wrapped.</p> <code>name</code> <code>str</code> <p>The name of the action.</p> <p>Initialize the AuthHandler with the callback function.</p> <p>Methods:</p> Name Description <code>check_update</code> <p>Determine if an update should be handled by this handler instance.</p> Source code in <code>src/kamihi/tg/handlers/auth_handler.py</code> <pre><code>def __init__(self, handler: BaseHandler, name: str) -&gt; None:\n    \"\"\"Initialize the AuthHandler with the callback function.\"\"\"\n    self.handler = handler\n    self.name = name\n    super().__init__(self.handler.callback)\n</code></pre>"},{"location":"reference/kamihi/tg/handlers/#kamihi.tg.handlers.AuthHandler.check_update","title":"check_update","text":"<pre><code>check_update(update: Update) -&gt; bool\n</code></pre> <p>Determine if an update should be handled by this handler instance.</p> Source code in <code>src/kamihi/tg/handlers/auth_handler.py</code> <pre><code>def check_update(self, update: Update) -&gt; bool:\n    \"\"\"Determine if an update should be handled by this handler instance.\"\"\"\n    if not isinstance(update, Update):\n        return False\n\n    if update.message and update.effective_user:\n        user = get_user_from_telegram_id(update.effective_user.id)\n\n        if user is None:\n            logger.bind(user_id=update.effective_user.id, action=self.name).debug(\n                \"User not found in the database tried to use action.\"\n            )\n            return False\n\n        if not is_user_authorized(user, self.name):\n            logger.bind(user_id=user.telegram_id, action=self.name).debug(\n                \"User is not authorized to use this action.\"\n            )\n            return False\n\n    return self.handler.check_update(update)\n</code></pre>"},{"location":"reference/kamihi/tg/handlers/auth_handler/","title":"kamihi.tg.handlers.auth_handler","text":""},{"location":"reference/kamihi/tg/handlers/auth_handler/#kamihi.tg.handlers.auth_handler","title":"kamihi.tg.handlers.auth_handler","text":"<p>Custom handler for Telegram bot that checks if a user is authorized to use a wrapped handler.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>AuthHandler</code> <p>Custom wrapper handler that checks if the user is authorized to use the wrapped handler before executing it.</p>"},{"location":"reference/kamihi/tg/handlers/auth_handler/#kamihi.tg.handlers.auth_handler.AuthHandler","title":"AuthHandler","text":"<pre><code>AuthHandler(handler: BaseHandler, name: str)\n</code></pre> <p>               Bases: <code>BaseHandler</code></p> <p>Custom wrapper handler that checks if the user is authorized to use the wrapped handler before executing it.</p> <p>Attributes:</p> Name Type Description <code>handler</code> <code>BaseHandler</code> <p>the handler to be wrapped.</p> <code>name</code> <code>str</code> <p>The name of the action.</p> <p>Initialize the AuthHandler with the callback function.</p> <p>Methods:</p> Name Description <code>check_update</code> <p>Determine if an update should be handled by this handler instance.</p> Source code in <code>src/kamihi/tg/handlers/auth_handler.py</code> <pre><code>def __init__(self, handler: BaseHandler, name: str) -&gt; None:\n    \"\"\"Initialize the AuthHandler with the callback function.\"\"\"\n    self.handler = handler\n    self.name = name\n    super().__init__(self.handler.callback)\n</code></pre>"},{"location":"reference/kamihi/tg/handlers/auth_handler/#kamihi.tg.handlers.auth_handler.AuthHandler.check_update","title":"check_update","text":"<pre><code>check_update(update: Update) -&gt; bool\n</code></pre> <p>Determine if an update should be handled by this handler instance.</p> Source code in <code>src/kamihi/tg/handlers/auth_handler.py</code> <pre><code>def check_update(self, update: Update) -&gt; bool:\n    \"\"\"Determine if an update should be handled by this handler instance.\"\"\"\n    if not isinstance(update, Update):\n        return False\n\n    if update.message and update.effective_user:\n        user = get_user_from_telegram_id(update.effective_user.id)\n\n        if user is None:\n            logger.bind(user_id=update.effective_user.id, action=self.name).debug(\n                \"User not found in the database tried to use action.\"\n            )\n            return False\n\n        if not is_user_authorized(user, self.name):\n            logger.bind(user_id=user.telegram_id, action=self.name).debug(\n                \"User is not authorized to use this action.\"\n            )\n            return False\n\n    return self.handler.check_update(update)\n</code></pre>"},{"location":"reference/kamihi/tg/send/","title":"kamihi.tg.send","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send","title":"kamihi.tg.send","text":"<p>Send functions for Telegram.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>reply_text</code> <p>Reply to a message update.</p> <code>send_text</code> <p>Send a text message to a chat.</p>"},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.reply_text","title":"reply_text  <code>async</code>","text":"<pre><code>reply_text(\n    update: Update, context: CallbackContext, text: str\n) -&gt; None\n</code></pre> <p>Reply to a message update.</p> <p>Convenience method to send a text message in response to an update.</p> <p>Parameters:</p> Name Type Description Default <code>Update</code> <p>the update object</p> required <code>CallbackContext</code> <p>the context object</p> required <code>str</code> <p>the text to send</p> required Source code in <code>src/kamihi/tg/send.py</code> <pre><code>async def reply_text(update: Update, context: CallbackContext, text: str) -&gt; None:\n    \"\"\"\n    Reply to a message update.\n\n    Convenience method to send a text message in response to an update.\n\n    Args:\n        update: the update object\n        context: the context object\n        text: the text to send\n\n    \"\"\"\n    bot = context.bot\n    chat_id = update.effective_message.chat_id\n    message_id = update.effective_message.message_id\n\n    await send_text(bot, chat_id, text, message_id)\n</code></pre>"},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.reply_text(update)","title":"<code>update</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.reply_text(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.reply_text(text)","title":"<code>text</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send_text","title":"send_text  <code>async</code>","text":"<pre><code>send_text(\n    bot: Bot,\n    chat_id: int,\n    text: str,\n    reply_to_message_id: int = None,\n) -&gt; Message | None\n</code></pre> <p>Send a text message to a chat.</p> <p>Parameters:</p> Name Type Description Default <code>Bot</code> <p>The Telegram Bot instance.</p> required <code>int</code> <p>The ID of the chat to send the message to.</p> required <code>str</code> <p>The text of the message.</p> required <code>int</code> <p>The ID of the message to reply to. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Message | None</code> <p>Message | None: The response from the Telegram API, or None if an error occurs.</p> Source code in <code>src/kamihi/tg/send.py</code> <pre><code>async def send_text(\n    bot: Bot,\n    chat_id: int,\n    text: str,\n    reply_to_message_id: int = None,\n) -&gt; Message | None:\n    \"\"\"\n    Send a text message to a chat.\n\n    Args:\n        bot (Bot): The Telegram Bot instance.\n        chat_id (int): The ID of the chat to send the message to.\n        text (str): The text of the message.\n        reply_to_message_id (int, optional): The ID of the message to reply to. Defaults to None.\n\n    Returns:\n        Message | None: The response from the Telegram API, or None if an error occurs.\n\n    \"\"\"\n    lg = logger.bind(chat_id=chat_id, received_id=reply_to_message_id, response_text=text)\n\n    with lg.catch(exception=TelegramError, message=\"Failed to send message\"):\n        reply = await bot.send_message(\n            chat_id,\n            md(text),\n            reply_to_message_id=reply_to_message_id,\n        )\n        lg.bind(response_id=reply.message_id).debug(\"Reply sent\" if reply_to_message_id else \"Message sent\")\n        return reply\n</code></pre>"},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send_text(bot)","title":"<code>bot</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send_text(chat_id)","title":"<code>chat_id</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send_text(text)","title":"<code>text</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send_text(reply_to_message_id)","title":"<code>reply_to_message_id</code>","text":""},{"location":"reference/kamihi/users/","title":"kamihi.users","text":""},{"location":"reference/kamihi/users/#kamihi.users","title":"kamihi.users","text":"<p>Users module of the Kamihi framework.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>models</code> <p>Database models for the users module.</p> <code>users</code> <p>Common user-related functions.</p> <p>Functions:</p> Name Description <code>get_user_from_telegram_id</code> <p>Get a user from the database using their Telegram ID.</p> <code>get_users</code> <p>Get all users from the database.</p> <code>is_user_authorized</code> <p>Check if a user is authorized to use a specific action.</p>"},{"location":"reference/kamihi/users/#kamihi.users.Permission","title":"Permission","text":"<p>               Bases: <code>Document</code></p> <p>Permission model for actions.</p>"},{"location":"reference/kamihi/users/#kamihi.users.RegisteredAction","title":"RegisteredAction","text":"<p>               Bases: <code>Document</code></p> <p>RegisteredAction model.</p> <p>This model represents an action that is registered in the system. It is used to manage user actions and their associated data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>description</code> <code>str</code> <p>A description of the action.</p>"},{"location":"reference/kamihi/users/#kamihi.users.Role","title":"Role","text":"<p>               Bases: <code>Document</code></p> <p>Role model.</p> <p>This model represents a role in the system. It is used to manage user permissions and access levels.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the role.</p>"},{"location":"reference/kamihi/users/#kamihi.users.User","title":"User","text":"<p>               Bases: <code>Document</code></p> <p>Placeholder for the User model.</p> <p>Methods:</p> Name Description <code>get_model</code> <p>Get the model class for the User.</p> <code>set_model</code> <p>Set the model class for the User.</p>"},{"location":"reference/kamihi/users/#kamihi.users.User.get_model","title":"get_model  <code>classmethod</code>","text":"<pre><code>get_model() -&gt; type[User]\n</code></pre> <p>Get the model class for the User.</p> <p>Returns:</p> Name Type Description <code>type</code> <code>type[User]</code> <p>The model class for the User.</p> Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef get_model(cls) -&gt; type[\"User\"]:\n    \"\"\"\n    Get the model class for the User.\n\n    Returns:\n        type: The model class for the User.\n\n    \"\"\"\n    return cls if cls._model is None else cls._model\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.User.set_model","title":"set_model  <code>classmethod</code>","text":"<pre><code>set_model(model: type[User]) -&gt; None\n</code></pre> <p>Set the model class for the User.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The model class to set.</p> required Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef set_model(cls, model: type[\"User\"]) -&gt; None:\n    \"\"\"\n    Set the model class for the User.\n\n    Args:\n        model (type): The model class to set.\n\n    \"\"\"\n    cls._model = model\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.User.set_model(model)","title":"<code>model</code>","text":""},{"location":"reference/kamihi/users/#kamihi.users.get_user_from_telegram_id","title":"get_user_from_telegram_id","text":"<pre><code>get_user_from_telegram_id(telegram_id: int) -&gt; User | None\n</code></pre> <p>Get a user from the database using their Telegram ID.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>The Telegram ID of the user.</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: The user object if found, otherwise None.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def get_user_from_telegram_id(telegram_id: int) -&gt; User | None:\n    \"\"\"\n    Get a user from the database using their Telegram ID.\n\n    Args:\n        telegram_id (int): The Telegram ID of the user.\n\n    Returns:\n        User | None: The user object if found, otherwise None.\n\n    \"\"\"\n    return User.objects(telegram_id=telegram_id).first()\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.get_user_from_telegram_id(telegram_id)","title":"<code>telegram_id</code>","text":""},{"location":"reference/kamihi/users/#kamihi.users.get_users","title":"get_users","text":"<pre><code>get_users() -&gt; list[User]\n</code></pre> <p>Get all users from the database.</p> <p>Returns:</p> Type Description <code>list[User]</code> <p>list[User]: A list of all users in the database.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def get_users() -&gt; list[User]:\n    \"\"\"\n    Get all users from the database.\n\n    Returns:\n        list[User]: A list of all users in the database.\n\n    \"\"\"\n    return list(User.objects)\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.is_user_authorized","title":"is_user_authorized","text":"<pre><code>is_user_authorized(user: User, action: str) -&gt; bool\n</code></pre> <p>Check if a user is authorized to use a specific action.</p> <p>Parameters:</p> Name Type Description Default <code>User</code> <p>The user object to check.</p> required <code>str</code> <p>The action to check authorization for.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the user is authorized, False otherwise.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def is_user_authorized(user: User, action: str) -&gt; bool:\n    \"\"\"\n    Check if a user is authorized to use a specific action.\n\n    Args:\n        user (User): The user object to check.\n        action (str): The action to check authorization for.\n\n    Returns:\n        bool: True if the user is authorized, False otherwise.\n\n    \"\"\"\n    if user.is_admin:\n        return True\n\n    action = RegisteredAction.objects(name=action).first()\n    role = Role.objects(users=user).first()\n    permissions = Permission.objects(Q(action=action) &amp; (Q(users=user) | Q(roles=role))).first()\n\n    return bool(permissions)\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.is_user_authorized(user)","title":"<code>user</code>","text":""},{"location":"reference/kamihi/users/#kamihi.users.is_user_authorized(action)","title":"<code>action</code>","text":""},{"location":"reference/kamihi/users/models/","title":"kamihi.users.models","text":""},{"location":"reference/kamihi/users/models/#kamihi.users.models","title":"kamihi.users.models","text":"<p>Database models for the users module.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>permission</code> <p>Permission model for actions.</p> <code>role</code> <p>Role model (the one I never had...).</p> <code>user</code> <p>User model.</p> <p>Classes:</p> Name Description <code>Permission</code> <p>Permission model for actions.</p> <code>Role</code> <p>Role model.</p> <code>User</code> <p>Placeholder for the User model.</p>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.Permission","title":"Permission","text":"<p>               Bases: <code>Document</code></p> <p>Permission model for actions.</p>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.Role","title":"Role","text":"<p>               Bases: <code>Document</code></p> <p>Role model.</p> <p>This model represents a role in the system. It is used to manage user permissions and access levels.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the role.</p>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.User","title":"User","text":"<p>               Bases: <code>Document</code></p> <p>Placeholder for the User model.</p> <p>Methods:</p> Name Description <code>get_model</code> <p>Get the model class for the User.</p> <code>set_model</code> <p>Set the model class for the User.</p>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.User.get_model","title":"get_model  <code>classmethod</code>","text":"<pre><code>get_model() -&gt; type[User]\n</code></pre> <p>Get the model class for the User.</p> <p>Returns:</p> Name Type Description <code>type</code> <code>type[User]</code> <p>The model class for the User.</p> Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef get_model(cls) -&gt; type[\"User\"]:\n    \"\"\"\n    Get the model class for the User.\n\n    Returns:\n        type: The model class for the User.\n\n    \"\"\"\n    return cls if cls._model is None else cls._model\n</code></pre>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.User.set_model","title":"set_model  <code>classmethod</code>","text":"<pre><code>set_model(model: type[User]) -&gt; None\n</code></pre> <p>Set the model class for the User.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The model class to set.</p> required Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef set_model(cls, model: type[\"User\"]) -&gt; None:\n    \"\"\"\n    Set the model class for the User.\n\n    Args:\n        model (type): The model class to set.\n\n    \"\"\"\n    cls._model = model\n</code></pre>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.User.set_model(model)","title":"<code>model</code>","text":""},{"location":"reference/kamihi/users/models/permission/","title":"kamihi.users.models.permission","text":""},{"location":"reference/kamihi/users/models/permission/#kamihi.users.models.permission","title":"kamihi.users.models.permission","text":"<p>Permission model for actions.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>Permission</code> <p>Permission model for actions.</p>"},{"location":"reference/kamihi/users/models/permission/#kamihi.users.models.permission.Permission","title":"Permission","text":"<p>               Bases: <code>Document</code></p> <p>Permission model for actions.</p>"},{"location":"reference/kamihi/users/models/role/","title":"kamihi.users.models.role","text":""},{"location":"reference/kamihi/users/models/role/#kamihi.users.models.role","title":"kamihi.users.models.role","text":"<p>Role model (the one I never had...).</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>Role</code> <p>Role model.</p>"},{"location":"reference/kamihi/users/models/role/#kamihi.users.models.role.Role","title":"Role","text":"<p>               Bases: <code>Document</code></p> <p>Role model.</p> <p>This model represents a role in the system. It is used to manage user permissions and access levels.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the role.</p>"},{"location":"reference/kamihi/users/models/user/","title":"kamihi.users.models.user","text":""},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user","title":"kamihi.users.models.user","text":"<p>User model.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>User</code> <p>Placeholder for the User model.</p>"},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user.User","title":"User","text":"<p>               Bases: <code>Document</code></p> <p>Placeholder for the User model.</p> <p>Methods:</p> Name Description <code>get_model</code> <p>Get the model class for the User.</p> <code>set_model</code> <p>Set the model class for the User.</p>"},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user.User.get_model","title":"get_model  <code>classmethod</code>","text":"<pre><code>get_model() -&gt; type[User]\n</code></pre> <p>Get the model class for the User.</p> <p>Returns:</p> Name Type Description <code>type</code> <code>type[User]</code> <p>The model class for the User.</p> Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef get_model(cls) -&gt; type[\"User\"]:\n    \"\"\"\n    Get the model class for the User.\n\n    Returns:\n        type: The model class for the User.\n\n    \"\"\"\n    return cls if cls._model is None else cls._model\n</code></pre>"},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user.User.set_model","title":"set_model  <code>classmethod</code>","text":"<pre><code>set_model(model: type[User]) -&gt; None\n</code></pre> <p>Set the model class for the User.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The model class to set.</p> required Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef set_model(cls, model: type[\"User\"]) -&gt; None:\n    \"\"\"\n    Set the model class for the User.\n\n    Args:\n        model (type): The model class to set.\n\n    \"\"\"\n    cls._model = model\n</code></pre>"},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user.User.set_model(model)","title":"<code>model</code>","text":""},{"location":"reference/kamihi/users/users/","title":"kamihi.users.users","text":""},{"location":"reference/kamihi/users/users/#kamihi.users.users","title":"kamihi.users.users","text":"<p>Common user-related functions.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>get_user_from_telegram_id</code> <p>Get a user from the database using their Telegram ID.</p> <code>get_users</code> <p>Get all users from the database.</p> <code>is_user_authorized</code> <p>Check if a user is authorized to use a specific action.</p>"},{"location":"reference/kamihi/users/users/#kamihi.users.users.get_user_from_telegram_id","title":"get_user_from_telegram_id","text":"<pre><code>get_user_from_telegram_id(telegram_id: int) -&gt; User | None\n</code></pre> <p>Get a user from the database using their Telegram ID.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>The Telegram ID of the user.</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: The user object if found, otherwise None.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def get_user_from_telegram_id(telegram_id: int) -&gt; User | None:\n    \"\"\"\n    Get a user from the database using their Telegram ID.\n\n    Args:\n        telegram_id (int): The Telegram ID of the user.\n\n    Returns:\n        User | None: The user object if found, otherwise None.\n\n    \"\"\"\n    return User.objects(telegram_id=telegram_id).first()\n</code></pre>"},{"location":"reference/kamihi/users/users/#kamihi.users.users.get_user_from_telegram_id(telegram_id)","title":"<code>telegram_id</code>","text":""},{"location":"reference/kamihi/users/users/#kamihi.users.users.get_users","title":"get_users","text":"<pre><code>get_users() -&gt; list[User]\n</code></pre> <p>Get all users from the database.</p> <p>Returns:</p> Type Description <code>list[User]</code> <p>list[User]: A list of all users in the database.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def get_users() -&gt; list[User]:\n    \"\"\"\n    Get all users from the database.\n\n    Returns:\n        list[User]: A list of all users in the database.\n\n    \"\"\"\n    return list(User.objects)\n</code></pre>"},{"location":"reference/kamihi/users/users/#kamihi.users.users.is_user_authorized","title":"is_user_authorized","text":"<pre><code>is_user_authorized(user: User, action: str) -&gt; bool\n</code></pre> <p>Check if a user is authorized to use a specific action.</p> <p>Parameters:</p> Name Type Description Default <code>User</code> <p>The user object to check.</p> required <code>str</code> <p>The action to check authorization for.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the user is authorized, False otherwise.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def is_user_authorized(user: User, action: str) -&gt; bool:\n    \"\"\"\n    Check if a user is authorized to use a specific action.\n\n    Args:\n        user (User): The user object to check.\n        action (str): The action to check authorization for.\n\n    Returns:\n        bool: True if the user is authorized, False otherwise.\n\n    \"\"\"\n    if user.is_admin:\n        return True\n\n    action = RegisteredAction.objects(name=action).first()\n    role = Role.objects(users=user).first()\n    permissions = Permission.objects(Q(action=action) &amp; (Q(users=user) | Q(roles=role))).first()\n\n    return bool(permissions)\n</code></pre>"},{"location":"reference/kamihi/users/users/#kamihi.users.users.is_user_authorized(user)","title":"<code>user</code>","text":""},{"location":"reference/kamihi/users/users/#kamihi.users.users.is_user_authorized(action)","title":"<code>action</code>","text":""},{"location":"reference/kamihi/web/","title":"kamihi.web","text":""},{"location":"reference/kamihi/web/#kamihi.web","title":"kamihi.web","text":"<p>Web interface module for Kamihi.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>views</code> <p>Custom views for the admin interface.</p> <code>web</code> <p>Web interface main file.</p> <p>Classes:</p> Name Description <code>KamihiWeb</code> <p>KamihiWeb is a class that sets up a web server for the Kamihi application.</p>"},{"location":"reference/kamihi/web/#kamihi.web.KamihiWeb","title":"KamihiWeb","text":"<pre><code>KamihiWeb(\n    settings: WebSettings,\n    db_settings: DatabaseSettings,\n    hooks: dict[\n        Literal[\n            \"before_create\",\n            \"after_create\",\n            \"before_edit\",\n            \"after_edit\",\n            \"before_delete\",\n            \"after_delete\",\n        ],\n        list[callable],\n    ] = None,\n)\n</code></pre> <p>               Bases: <code>Thread</code></p> <p>KamihiWeb is a class that sets up a web server for the Kamihi application.</p> <p>This class is responsible for creating and running a web server with an admin interface. It also handles the database connection and configuration.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>WebSettings</code> <p>The settings for the Kamihi bot.</p> <code>db_settings</code> <code>DatabaseSettings</code> <p>The database settings for the Kamihi bot.</p> <code>app</code> <code>Starlette</code> <p>The application instance.</p> <code>admin</code> <code>Admin</code> <p>The Starlette-Admin instance for the admin interface.</p> <p>Initialize the KamihiWeb instance.</p> <p>Methods:</p> Name Description <code>run</code> <p>Run the app.</p> Source code in <code>src/kamihi/web/web.py</code> <pre><code>def __init__(\n    self,\n    settings: WebSettings,\n    db_settings: DatabaseSettings,\n    hooks: dict[\n        Literal[\n            \"before_create\",\n            \"after_create\",\n            \"before_edit\",\n            \"after_edit\",\n            \"before_delete\",\n            \"after_delete\",\n        ],\n        list[callable],\n    ] = None,\n) -&gt; None:\n    \"\"\"Initialize the KamihiWeb instance.\"\"\"\n    super().__init__()\n    self.settings = settings\n    self.db_settings = db_settings\n    self.hooks = hooks\n\n    self.daemon = True\n\n    self.app = None\n    self.admin = None\n</code></pre>"},{"location":"reference/kamihi/web/#kamihi.web.KamihiWeb.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the app.</p> Source code in <code>src/kamihi/web/web.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the app.\"\"\"\n    self._create_app()\n\n    uvicorn.run(\n        self.app,\n        host=self.settings.host,\n        port=self.settings.port,\n        log_config={\n            \"version\": 1,\n            \"disable_existing_loggers\": False,\n            \"formatters\": {\n                \"default\": {\n                    \"()\": \"uvicorn.logging.DefaultFormatter\",\n                    \"fmt\": \"%(message)s\",\n                },\n                \"access\": {\n                    \"()\": \"uvicorn.logging.AccessFormatter\",\n                    \"fmt\": '%(client_addr)s - \"%(request_line)s\" %(status_code)s',  # noqa: E501\n                },\n            },\n            \"handlers\": {\n                \"default\": {\n                    \"formatter\": \"default\",\n                    \"class\": \"kamihi.web.web._InterceptHandler\",\n                },\n                \"access\": {\n                    \"formatter\": \"access\",\n                    \"class\": \"kamihi.web.web._InterceptHandler\",\n                },\n            },\n            \"loggers\": {\n                \"uvicorn\": {\"handlers\": [\"default\"], \"level\": \"DEBUG\", \"propagate\": False},\n                \"uvicorn.error\": {\"level\": \"DEBUG\"},\n                \"uvicorn.access\": {\"handlers\": [\"access\"], \"level\": \"DEBUG\", \"propagate\": False},\n            },\n        },\n    )\n</code></pre>"},{"location":"reference/kamihi/web/views/","title":"kamihi.web.views","text":""},{"location":"reference/kamihi/web/views/#kamihi.web.views","title":"kamihi.web.views","text":"<p>Custom views for the admin interface.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>HooksView</code> <p>HooksView is a custom view that accepts a dictionary of hooks on different events.</p> <code>NoClsView</code> <p>NoClsView hides the \"_cls\" field from the admin interface.</p> <code>ReadOnlyView</code> <p>ReadOnlyView makes the model read-only in the admin interface.</p>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView","title":"HooksView","text":"<pre><code>HooksView(*args, hooks: dict = None, **kwargs)\n</code></pre> <p>               Bases: <code>NoClsView</code></p> <p>HooksView is a custom view that accepts a dictionary of hooks on different events.</p> <p>Initialize the HooksView with hooks.</p> <p>Parameters:</p> Name Type Description Default <p>Positional arguments.</p> <code>()</code> <code>dict</code> <p>A dictionary of hooks for different events.</p> <code>None</code> <p>Keyword arguments.</p> <code>{}</code> <p>Methods:</p> Name Description <code>after_create</code> <p>Run after creating an object.</p> <code>after_delete</code> <p>Run after deleting an object.</p> <code>after_edit</code> <p>Run after editing an object.</p> <code>before_create</code> <p>Run before creating an object.</p> <code>before_delete</code> <p>Run before deleting an object.</p> <code>before_edit</code> <p>Run before editing an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def __init__(self, *args, hooks: dict = None, **kwargs) -&gt; None:  # noqa: ANN002, ANN003\n    \"\"\"\n    Initialize the HooksView with hooks.\n\n    Args:\n        *args: Positional arguments.\n        hooks (dict): A dictionary of hooks for different events.\n        **kwargs: Keyword arguments.\n\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self.hooks = hooks or {}\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView(*args)","title":"<code>*args</code>","text":""},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView(hooks)","title":"<code>hooks</code>","text":""},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.after_create","title":"after_create  <code>async</code>","text":"<pre><code>after_create(request: Request, obj: Any) -&gt; None\n</code></pre> <p>Run after creating an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def after_create(self, request: Request, obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run after creating an object.\"\"\"\n    for hook in self.hooks.get(\"after_create\", []):\n        await hook(request, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.after_delete","title":"after_delete  <code>async</code>","text":"<pre><code>after_delete(request: Request, obj: Any) -&gt; None\n</code></pre> <p>Run after deleting an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def after_delete(self, request: Request, obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run after deleting an object.\"\"\"\n    for hook in self.hooks.get(\"after_delete\", []):\n        await hook(request, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.after_edit","title":"after_edit  <code>async</code>","text":"<pre><code>after_edit(request: Request, obj: Any) -&gt; None\n</code></pre> <p>Run after editing an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def after_edit(self, request: Request, obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run after editing an object.\"\"\"\n    for hook in self.hooks.get(\"after_edit\", []):\n        await hook(request, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.before_create","title":"before_create  <code>async</code>","text":"<pre><code>before_create(\n    request: Request, data: dict[str, Any], obj: Any\n) -&gt; None\n</code></pre> <p>Run before creating an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def before_create(self, request: Request, data: dict[str, Any], obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run before creating an object.\"\"\"\n    for hook in self.hooks.get(\"before_create\", []):\n        await hook(request, data, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.before_delete","title":"before_delete  <code>async</code>","text":"<pre><code>before_delete(request: Request, obj: Any) -&gt; None\n</code></pre> <p>Run before deleting an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def before_delete(self, request: Request, obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run before deleting an object.\"\"\"\n    for hook in self.hooks.get(\"before_delete\", []):\n        await hook(request, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.before_edit","title":"before_edit  <code>async</code>","text":"<pre><code>before_edit(\n    request: Request, data: dict[str, Any], obj: Any\n) -&gt; None\n</code></pre> <p>Run before editing an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def before_edit(self, request: Request, data: dict[str, Any], obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run before editing an object.\"\"\"\n    for hook in self.hooks.get(\"before_edit\", []):\n        await hook(request, data, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.NoClsView","title":"NoClsView","text":"<p>               Bases: <code>ModelView</code></p> <p>NoClsView hides the \"_cls\" field from the admin interface.</p>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.ReadOnlyView","title":"ReadOnlyView","text":"<pre><code>ReadOnlyView(*args, hooks: dict = None, **kwargs)\n</code></pre> <p>               Bases: <code>HooksView</code></p> <p>ReadOnlyView makes the model read-only in the admin interface.</p> <p>Methods:</p> Name Description <code>can_create</code> <p>Check if the user can create a new instance of the model.</p> <code>can_delete</code> <p>Check if the user can edit an instance of the model.</p> <code>can_edit</code> <p>Check if the user can edit an instance of the model.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def __init__(self, *args, hooks: dict = None, **kwargs) -&gt; None:  # noqa: ANN002, ANN003\n    \"\"\"\n    Initialize the HooksView with hooks.\n\n    Args:\n        *args: Positional arguments.\n        hooks (dict): A dictionary of hooks for different events.\n        **kwargs: Keyword arguments.\n\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self.hooks = hooks or {}\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.ReadOnlyView.can_create","title":"can_create","text":"<pre><code>can_create(request: Request) -&gt; bool\n</code></pre> <p>Check if the user can create a new instance of the model.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def can_create(self, request: Request) -&gt; bool:  # noqa: ARG002\n    \"\"\"Check if the user can create a new instance of the model.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.ReadOnlyView.can_delete","title":"can_delete","text":"<pre><code>can_delete(request: Request) -&gt; bool\n</code></pre> <p>Check if the user can edit an instance of the model.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def can_delete(self, request: Request) -&gt; bool:  # noqa: ARG002\n    \"\"\"Check if the user can edit an instance of the model.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.ReadOnlyView.can_edit","title":"can_edit","text":"<pre><code>can_edit(request: Request) -&gt; bool\n</code></pre> <p>Check if the user can edit an instance of the model.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def can_edit(self, request: Request) -&gt; bool:  # noqa: ARG002\n    \"\"\"Check if the user can edit an instance of the model.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/kamihi/web/web/","title":"kamihi.web.web","text":""},{"location":"reference/kamihi/web/web/#kamihi.web.web","title":"kamihi.web.web","text":"<p>Web interface main file.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>KamihiWeb</code> <p>KamihiWeb is a class that sets up a web server for the Kamihi application.</p>"},{"location":"reference/kamihi/web/web/#kamihi.web.web.KamihiWeb","title":"KamihiWeb","text":"<pre><code>KamihiWeb(\n    settings: WebSettings,\n    db_settings: DatabaseSettings,\n    hooks: dict[\n        Literal[\n            \"before_create\",\n            \"after_create\",\n            \"before_edit\",\n            \"after_edit\",\n            \"before_delete\",\n            \"after_delete\",\n        ],\n        list[callable],\n    ] = None,\n)\n</code></pre> <p>               Bases: <code>Thread</code></p> <p>KamihiWeb is a class that sets up a web server for the Kamihi application.</p> <p>This class is responsible for creating and running a web server with an admin interface. It also handles the database connection and configuration.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>WebSettings</code> <p>The settings for the Kamihi bot.</p> <code>db_settings</code> <code>DatabaseSettings</code> <p>The database settings for the Kamihi bot.</p> <code>app</code> <code>Starlette</code> <p>The application instance.</p> <code>admin</code> <code>Admin</code> <p>The Starlette-Admin instance for the admin interface.</p> <p>Initialize the KamihiWeb instance.</p> <p>Methods:</p> Name Description <code>run</code> <p>Run the app.</p> Source code in <code>src/kamihi/web/web.py</code> <pre><code>def __init__(\n    self,\n    settings: WebSettings,\n    db_settings: DatabaseSettings,\n    hooks: dict[\n        Literal[\n            \"before_create\",\n            \"after_create\",\n            \"before_edit\",\n            \"after_edit\",\n            \"before_delete\",\n            \"after_delete\",\n        ],\n        list[callable],\n    ] = None,\n) -&gt; None:\n    \"\"\"Initialize the KamihiWeb instance.\"\"\"\n    super().__init__()\n    self.settings = settings\n    self.db_settings = db_settings\n    self.hooks = hooks\n\n    self.daemon = True\n\n    self.app = None\n    self.admin = None\n</code></pre>"},{"location":"reference/kamihi/web/web/#kamihi.web.web.KamihiWeb.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the app.</p> Source code in <code>src/kamihi/web/web.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the app.\"\"\"\n    self._create_app()\n\n    uvicorn.run(\n        self.app,\n        host=self.settings.host,\n        port=self.settings.port,\n        log_config={\n            \"version\": 1,\n            \"disable_existing_loggers\": False,\n            \"formatters\": {\n                \"default\": {\n                    \"()\": \"uvicorn.logging.DefaultFormatter\",\n                    \"fmt\": \"%(message)s\",\n                },\n                \"access\": {\n                    \"()\": \"uvicorn.logging.AccessFormatter\",\n                    \"fmt\": '%(client_addr)s - \"%(request_line)s\" %(status_code)s',  # noqa: E501\n                },\n            },\n            \"handlers\": {\n                \"default\": {\n                    \"formatter\": \"default\",\n                    \"class\": \"kamihi.web.web._InterceptHandler\",\n                },\n                \"access\": {\n                    \"formatter\": \"access\",\n                    \"class\": \"kamihi.web.web._InterceptHandler\",\n                },\n            },\n            \"loggers\": {\n                \"uvicorn\": {\"handlers\": [\"default\"], \"level\": \"DEBUG\", \"propagate\": False},\n                \"uvicorn.error\": {\"level\": \"DEBUG\"},\n                \"uvicorn.access\": {\"handlers\": [\"access\"], \"level\": \"DEBUG\", \"propagate\": False},\n            },\n        },\n    )\n</code></pre>"}]}