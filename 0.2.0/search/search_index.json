{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This project is currently in the early stages of development and not functional!</p>"},{"location":"#kamihi","title":"Kamihi","text":"<p>Python framework for rapid Telegram bot development and management</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#011-2025-03-19","title":"0.1.1 (2025-03-19)","text":""},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>using new file header</li> </ul>"},{"location":"changelog/#010-2025-03-18","title":"0.1.0 (2025-03-18)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>added pre-commit and ruff</li> <li>initial project setup</li> </ul>"},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>delete boilerplate code</li> </ul>"},{"location":"reference/kamihi/","title":"kamihi","text":""},{"location":"reference/kamihi/#kamihi","title":"kamihi","text":"<p>Kamihi is a Python framework for creating and managing Telegram bots.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi import bot\n&gt;&gt;&gt; bot.start()\n</code></pre> License <p>MIT</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>The version of the package.</p> <code>bot</code> <code>Bot</code> <p>The bot instance for the Kamihi framework. Preferable to using the Bot class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Modules:</p> Name Description <code>base</code> <p>Base module for the Kamihi framework.</p> <code>bot</code> <p>Bot module for Kamihi.</p>"},{"location":"reference/kamihi/base/","title":"kamihi.base","text":""},{"location":"reference/kamihi/base/#kamihi.base","title":"kamihi.base","text":"<p>Base module for the Kamihi framework.</p> <p>Provides base utilities and classes for the framework.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>config</code> <p>Configuration module.</p> <code>logging</code> <p>Logging configuration module.</p> <code>manual_send</code> <p>Module for sending alerts to notification services.</p>"},{"location":"reference/kamihi/base/config/","title":"kamihi.base.config","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config","title":"kamihi.base.config","text":"<p>Configuration module.</p> <p>This module contains the configuration settings for the Kamihi framework. The configuration settings are loaded from environment variables and/or a <code>.env</code> file. They must begin with the prefix <code>KAMIHI_</code>.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>KamihiSettings</code> <p>Defines the configuration schema for the Kamihi framework.</p> <code>LogSettings</code> <p>Defines the logging configuration schema.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings","title":"KamihiSettings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Defines the configuration schema for the Kamihi framework.</p> <p>Attributes:</p> Name Type Description <code>log</code> <code>LogSettings</code> <p>Logging settings.</p> <code>model_config</code> <code>SettingsConfigDict</code> <p>Configuration dictionary for environment settings.</p> <p>Methods:</p> Name Description <code>settings_customise_sources</code> <p>Customize the order of settings sources.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> <p>Customize the order of settings sources.</p> <p>This method allows you to customize the order in which settings sources are loaded. The order of sources is important because it determines which settings take precedence when there are conflicts. The order of sources is as follows:     1. Environment variables     2. .env file     3. YAML file     4. Initial settings</p> <p>Parameters:</p> Name Type Description Default <code>type[BaseSettings]</code> <p>the settings class to customize sources for</p> required <code>PydanticBaseSettingsSource</code> <p>settings from class initialization</p> required <code>PydanticBaseSettingsSource</code> <p>settings from environment variables</p> required <code>PydanticBaseSettingsSource</code> <p>settings from .env file</p> required <code>PydanticBaseSettingsSource</code> <p>settings from file secrets</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[PydanticBaseSettingsSource, ...]</code> <p>A tuple containing the customized settings sources in the desired order.</p> Source code in <code>src/kamihi/base/config.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n    \"\"\"\n    Customize the order of settings sources.\n\n    This method allows you to customize the order in which settings sources are\n    loaded. The order of sources is important because it determines which settings\n    take precedence when there are conflicts.\n    The order of sources is as follows:\n        1. Environment variables\n        2. .env file\n        3. YAML file\n        4. Initial settings\n\n    Args:\n        settings_cls: the settings class to customize sources for\n        init_settings: settings from class initialization\n        env_settings: settings from environment variables\n        dotenv_settings: settings from .env file\n        file_secret_settings: settings from file secrets\n\n    Returns:\n        tuple: A tuple containing the customized settings sources in the desired order.\n\n    \"\"\"\n    return (\n        init_settings,\n        env_settings,\n        dotenv_settings,\n        YamlConfigSettingsSource(settings_cls, yaml_file=os.getenv(\"KAMIHI_CONFIG_FILE\", \"kamihi.yaml\")),\n        file_secret_settings,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(settings_cls)","title":"<code>settings_cls</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(init_settings)","title":"<code>init_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(env_settings)","title":"<code>env_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(dotenv_settings)","title":"<code>dotenv_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(file_secret_settings)","title":"<code>file_secret_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.LogSettings","title":"LogSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the logging configuration schema.</p> <p>Attributes:</p> Name Type Description <code>stdout_enable</code> <code>bool</code> <p>Enable or disable stdout logging.</p> <code>stdout_level</code> <code>str</code> <p>Log level for stdout logging.</p> <code>stdout_serialize</code> <code>bool</code> <p>Enable or disable serialization for stdout logging.</p> <code>stderr_enable</code> <code>bool</code> <p>Enable or disable stderr logging.</p> <code>stderr_level</code> <code>str</code> <p>Log level for stderr logging.</p> <code>stderr_serialize</code> <code>bool</code> <p>Enable or disable serialization for stderr logging.</p> <code>file_enable</code> <code>bool</code> <p>Enable or disable file logging.</p> <code>file_level</code> <code>str</code> <p>Log level for file logging.</p> <code>file_path</code> <code>str</code> <p>Path to the log file.</p> <code>file_serialize</code> <code>bool</code> <p>Enable or disable serialization for file logging.</p> <code>file_rotation</code> <code>str</code> <p>Rotation policy for the log file.</p> <code>file_retention</code> <code>str</code> <p>Retention policy for the log file.</p> <code>notification_enable</code> <code>bool</code> <p>Enable or disable notification logging.</p> <code>notification_level</code> <code>str</code> <p>Log level for notification logging.</p> <code>notification_urls</code> <code>list[str]</code> <p>List of URLs for notification services.</p>"},{"location":"reference/kamihi/base/logging/","title":"kamihi.base.logging","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging","title":"kamihi.base.logging","text":"<p>Logging configuration module.</p> <p>This module provides functions to configure logging for the Kamihi framework.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi.base.logging import configure_logging\n&gt;&gt;&gt; from kamihi.base.config import LogSettings\n&gt;&gt;&gt; from loguru import logger\n&gt;&gt;&gt; settings = LogSettings()\n&gt;&gt;&gt; configure_logging(logger, settings)\n&gt;&gt;&gt; logger.info(\"This is an info message.\")\n</code></pre> <p>Functions:</p> Name Description <code>configure_logging</code> <p>Configure logging for the module.</p>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging","title":"configure_logging","text":"<pre><code>configure_logging(\n    logger: Logger, settings: LogSettings\n) -&gt; None\n</code></pre> <p>Configure logging for the module.</p> <p>This function sets up the logging configuration for the module, including log level and format.</p> <p>Parameters:</p> Name Type Description Default <code>Logger</code> <p>The logger instance to configure.</p> required <code>LogSettings</code> <p>The logging settings to configure.</p> required Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def configure_logging(logger: loguru.Logger, settings: LogSettings) -&gt; None:\n    \"\"\"\n    Configure logging for the module.\n\n    This function sets up the logging configuration for the module, including\n    log level and format.\n\n    Args:\n        logger: The logger instance to configure.\n        settings: The logging settings to configure.\n\n    \"\"\"\n    logger.remove()\n\n    if settings.stdout_enable:\n        logger.add(\n            sys.stdout,\n            level=settings.stdout_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"&lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - \"\n            \"&lt;level&gt;{message}&lt;/level&gt;\",\n            serialize=settings.stdout_serialize,\n        )\n\n    if settings.stderr_enable:\n        logger.add(\n            sys.stderr,\n            level=settings.stderr_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"&lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - \"\n            \"&lt;level&gt;{message}&lt;/level&gt;\",\n            serialize=settings.stderr_serialize,\n        )\n\n    if settings.file_enable:\n        logger.add(\n            settings.file_path,\n            level=settings.file_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"&lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - \"\n            \"&lt;level&gt;{message}&lt;/level&gt;\",\n            serialize=settings.file_serialize,\n            rotation=settings.file_rotation,\n            retention=settings.file_retention,\n        )\n\n    if settings.notification_enable:\n        manual_sender = ManualSender(settings.notification_urls)\n        logger.add(\n            manual_sender.notify,\n            level=settings.notification_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"&lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - \"\n            \"&lt;level&gt;{message}&lt;/level&gt;\",\n            filter={\"apprise\": False},\n        )\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging(logger)","title":"<code>logger</code>","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/base/manual_send/","title":"kamihi.base.manual_send","text":""},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send","title":"kamihi.base.manual_send","text":"<p>Module for sending alerts to notification services.</p> <p>This module provides functions for sending alerts to notification services using the Apprise library.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>ManualSender</code> <p>Class for sending alerts to notification services.</p>"},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send.ManualSender","title":"ManualSender","text":"<pre><code>ManualSender(urls: list[str])\n</code></pre> <p>               Bases: <code>Apprise</code></p> <p>Class for sending alerts to notification services.</p> <p>This class extends the Apprise library to provide a simple interface for sending alerts to various notification services using Apprise URLs.</p> <p>Manual sender.</p> <p>Parameters:</p> Name Type Description Default <code>list[str]</code> <p>List of Apprise URLs for sending alerts through notification services.</p> required Source code in <code>src/kamihi/base/manual_send.py</code> <pre><code>def __init__(self, urls: list[str]) -&gt; None:\n    \"\"\"\n    Manual sender.\n\n    Args:\n        urls: List of Apprise URLs for sending alerts through notification services.\n\n    \"\"\"\n    super().__init__()\n    self.add(urls)\n</code></pre>"},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send.ManualSender(urls)","title":"<code>urls</code>","text":""},{"location":"reference/kamihi/bot/","title":"kamihi.bot","text":""},{"location":"reference/kamihi/bot/#kamihi.bot","title":"kamihi.bot","text":"<p>Bot module for Kamihi.</p> <p>This module provides the primary interface for the Kamihi framework, allowing for the creation and management of Telegram bots.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>bot</code> <p>Bot module for Kamihi.</p> <p>Classes:</p> Name Description <code>Bot</code> <p>Bot class for Kamihi.</p>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot","title":"Bot","text":"<pre><code>Bot(**kwargs: dict[str, Any])\n</code></pre> <p>Bot class for Kamihi.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>KamihiSettings</code> <p>The settings for the bot.</p> <p>Initialize the Bot class.</p> <p>Parameters:</p> Name Type Description Default <code>dict[str, Any]</code> <p>Additional keyword arguments for settings.</p> <code>{}</code> <p>Methods:</p> Name Description <code>set_settings</code> <p>Set the settings for the bot.</p> <code>start</code> <p>Start the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def __init__(self, **kwargs: dict[str, Any]) -&gt; None:\n    \"\"\"\n    Initialize the Bot class.\n\n    Args:\n        **kwargs: Additional keyword arguments for settings.\n\n    \"\"\"\n    self.settings = KamihiSettings(**kwargs)\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.set_settings","title":"set_settings","text":"<pre><code>set_settings(settings: KamihiSettings) -&gt; None\n</code></pre> <p>Set the settings for the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def set_settings(self, settings: KamihiSettings) -&gt; None:\n    \"\"\"Set the settings for the bot.\"\"\"\n    self.settings = settings\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the bot.\"\"\"\n    configure_logging(logger, self.settings.log)\n\n    logger.info(\"Starting bot...\")\n\n    while True:\n        # Placeholder for bot's main loop\n        logger.debug(\"Bot is running...\")\n        sleep(1)\n</code></pre>"},{"location":"reference/kamihi/bot/bot/","title":"kamihi.bot.bot","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot","title":"kamihi.bot.bot","text":"<p>Bot module for Kamihi.</p> <p>This module provides the primary interface for the Kamihi framework, allowing for the creation and management of Telegram bots.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi import bot\n&gt;&gt;&gt; bot.start()\n</code></pre> <p>Classes:</p> Name Description <code>Bot</code> <p>Bot class for Kamihi.</p>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot","title":"Bot","text":"<pre><code>Bot(**kwargs: dict[str, Any])\n</code></pre> <p>Bot class for Kamihi.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>KamihiSettings</code> <p>The settings for the bot.</p> <p>Initialize the Bot class.</p> <p>Parameters:</p> Name Type Description Default <code>dict[str, Any]</code> <p>Additional keyword arguments for settings.</p> <code>{}</code> <p>Methods:</p> Name Description <code>set_settings</code> <p>Set the settings for the bot.</p> <code>start</code> <p>Start the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def __init__(self, **kwargs: dict[str, Any]) -&gt; None:\n    \"\"\"\n    Initialize the Bot class.\n\n    Args:\n        **kwargs: Additional keyword arguments for settings.\n\n    \"\"\"\n    self.settings = KamihiSettings(**kwargs)\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.set_settings","title":"set_settings","text":"<pre><code>set_settings(settings: KamihiSettings) -&gt; None\n</code></pre> <p>Set the settings for the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def set_settings(self, settings: KamihiSettings) -&gt; None:\n    \"\"\"Set the settings for the bot.\"\"\"\n    self.settings = settings\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the bot.\"\"\"\n    configure_logging(logger, self.settings.log)\n\n    logger.info(\"Starting bot...\")\n\n    while True:\n        # Placeholder for bot's main loop\n        logger.debug(\"Bot is running...\")\n        sleep(1)\n</code></pre>"}]}